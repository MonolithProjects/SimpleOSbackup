#!/bin/bash

#title           :MyOScopy
#description     :This script is used for copy Linux OS to backup device.
#author          :Michal Muransky
#date            :14-January-17
version=2.0-alpha6



# SETTINGS ##############################################################

# Since version 2.0 the settings are located in /etc/myoscopy.conf 


# DEFAULTS ##############################################################

# Path to temporary log file
LOG=/tmp/myoscopy.txt

# Path to settings file
SETTINGS=/etc/myoscopy.conf

# Delete previous backup
DEL=1

# Shutdown after backup
SHUT=0

# Send email
SENDEMAIL=1

# Override the warinigs and continue
FORCE=0

# Copy SELinux permissions
SELINUX=1


# CODE ##################################################################

TEMP=`getopt -o tXxvnsSchfp:d: --long test,no-selinux,no-delete,help,version,show,shutdown,no-email,clear,force,debug,to-partition:,to-disk: -- "$@"`
eval set -- "$TEMP"

# Clearing and reading Settings file
LOGFILE=""
SHUTSCRIPT=""
TITLE=""
EMAIL=""
SMTP=""
SMTPUSER=""
SMTPPASS=""
NSSCONFIGDIR=""
ADDITIONALDONOTCOPY=""
source $SETTINGS

# MANDATORY CHECKS:

usercheck()  {
        wai=$(whoami 2>/dev/null)
        if [ $wai != root ]; then
		echo "" 
                echo 'USER CHECK DID NOT PASS: You must be a root to run MyOSCopy.'
                exit 1
        fi
}

componentscheck() {
	if [ ! -f /usr/bin/mailx ]; then
		if [ ! -f /bin/mailx ]; then
			echo ""
			echo "COMPONENT CHECK DID NOT PASS: mailx is missing. Email report will be not sent!"
			sleep 2
		fi
	fi
	if [ ! -f /usr/bin/rsync ]; then
		echo "COMPONENT CHECK DID NOT PASS: rsync is missing. Please install it first!"
		sleep 2
		exit 1
	fi
}


# WARNINGS:

sizecheckold()     {
        EXCEPTGREP=${EXCLUDE[@]/#/|}; EXCEPTGREP=$(echo "$EXCEPTGREP"| cut -c 2- |tr -d " \t\n\r" )
        WHAT=$(cat /etc/fstab |grep -vE "#|swap|SWAP|myoscopy" |grep -vE "$EXCEPTGREP" | grep -E "UUID|/dev" |awk '{print $2}'| sed ':a;N;$!ba;s/\n/ /g')
        NLINES=$(df -kP $WHAT | sed 1d |uniq | wc -l)
        COUNTER=0
        TOGETHER=0
        while [ $COUNTER -lt $NLINES ]; do
                let COUNTER=COUNTER+1
                LINE=$(df -kP $WHAT | grep -v "df"| sed 1d |uniq |awk '{print $3}'|sed "${COUNTER}q;d")
                TOGETHER=$(expr $TOGETHER + $LINE)
        done
	mkdir -p /mnt/myoscopy
        DEDSIZE=$(df -k /mnt/myoscopy | sed 1d |awk '{print $2}')
        if [ $TOGETHER -gt $DEDSIZE ]; then
		if [ $FORCE == 0 ]; then
                	echo "WARNING: Destination is too small. Choose larger disk." >> $LOG
			echo "WARNING: Destination is too small.............  [BACKUP INTERRUPTED]"
			sendlog
			cat $LOG >> $LOGFILE
                	clear
                	exit 1
		else
                        echo "WARNING: Destination is too small. Forced to continue." >> $LOG
                        echo "WARNING: Destination is too small.............  [FORCED TO CONITUE]"
			sleep 1
		fi
        fi
}

sizecheck() {
        EXCEPTGREP=${EXCLUDE[@]/#/|}; EXCEPTGREP=$(echo "$EXCEPTGREP"| cut -c 2- |tr -d " \t\n\r" )
        WHAT=$(cat /etc/fstab |grep -vE "#|boot|swap|SWAP|myoscopy" |grep -vE "$EXCEPTGREP" | grep -E "UUID|/dev" |awk '{print $2}'| sed ':a;N;$!ba;s/\n/ /g')
        NLINES=$(df -kP $WHAT | sed 1d |uniq | wc -l)
        COUNTER=0
        TOGETHER=0
        while [ $COUNTER -lt $NLINES ]; do
                let COUNTER=COUNTER+1
                LINE=$(df -kP $WHAT | grep -v "df"| sed 1d |uniq |awk '{print $3}'|sed "${COUNTER}q;d")
                TOGETHER=$(expr $TOGETHER + $LINE)
        done
        DEDSIZE=$(df -k /mnt/myoscopy | sed 1d |awk '{print $2}')
        if [ $TOGETHER -gt $DEDSIZE ]; then
                if [ $FORCE == 0 ]; then
                        echo "WARNING: Destination is too small. Choose larger disk." >> $LOG
                        echo "WARNING: Destination is too small.............  [BACKUP INTERRUPTED]"
                        sendlog
                        cat $LOG >> $LOGFILE
                        clear
                        exit 1
                else
                        echo "WARNING: Destination is too small. Forced to continue." >> $LOG
                        echo "WARNING: Destination is too small.............  [FORCED TO CONITUE]"
                        sleep 1
                fi
        fi

}

patched() {
        if [ -f /boot/vmlinuz-`uname -r` ]; then 
		LASTPATCH=$(stat -c %z /boot/vmlinuz-`uname -r` |cut -d ' ' -f 1 |tr -d "-")
       	elif [ -f /boot/vmlinuz-`uname -r`-generic ]; then
		LASTPATCH=$(stat -c %z /boot/vmlinuz-`uname -r`-generic |cut -d ' ' -f 1 |tr -d "-")
	elif [ -f /boot/vmlinuz-generic-`uname -r` ]; then
		LASTPATCH=$(stat -c %z /boot/vmlinuz-generic-`uname -r` |cut -d ' ' -f 1 |tr -d "-")
	else
	  echo "WARNING: Unable to determine last patching date. You have 15 seconds to interrupt the backup (Ctrl+C)."
	  #sleep 15
	  secs=15
	  while [ $secs -gt 0 ]; do
   		echo -ne "-- $secs --\033[0K\r"
   		sleep 1
   	  	: $((secs--))
	  done
	  return   	
	fi 
	TODAY=$(date +%Y%m%d)
        SO=$(( ($(date --date=$TODAY +%s) - $(date --date=$LASTPATCH +%s) )/(60*60*24) ))
        if [ $SO -lt 7 ]; then
		if [ $FORCE == 0 ]; then
	                echo "WARNING: Server was patched only $SO days back! MyOScopy is stopped." >> $LOG
        	        echo "WARNING: Server was patched only $SO days back!.  [BACKUP INTERRUPTED]"
               		sendlog
               		cat $LOG >> $LOGFILE
			clear
               		exit 1
		else
	                echo "WARNING: Server was patched only $SO days back! MyOScopy is stopped." >> $LOG
                        echo "WARNING: Server was patched only $SO days back!.  [FORCED TO CONITUE]"
			sleep 1
		fi
        fi
}

checkmount() {
        MOUNTED=$(grep $DED /proc/mounts)
        if [ -n "$MOUNTED" ]; then
		if [ $FORCE == 0 ]; then
	           	echo "WARNING: $DED is already mounted! MyOScopy is stopped." >> $LOG
        	   	echo "WARNING: $DED is already mounted!........  [BACKUP INTERRUPTED]"
           		sendlog
           		cat $LOG >> $LOGFILE
	   		clear
           		exit 1
		else
                        echo "WARNING: $DED is already mounted! MyOScopy is stopped." >> $LOG
                        echo "WARNING: $DED is already mounted!........  [FORCED TO CONITUE]"
			sleep 1
		fi
        fi
}


# MAIN PROCESSES:


todisk() {
	usercheck
	componentscheck
	checkmount
	patched
	patched
	dedreal
	sizecheckold
	collectinfo
	if [ "$DEDTYPE" != "disk" ]; then
		echo "Toto je particia!!!!!"
		exit 1
	fi
        DEDBP="/tmp/dedbp"
        #2TB - 2199023255552B
        if [ "$DEDSECTORS" -gt 4294967292 -o "$EFI" == "efi" ]; then
                DEDLAB="gpt"
        else
                DEDLAB="dos"
        fi
        echo "label: " $DEDLAB > $DEDBP
        echo "device: " $DEDREAL >> $DEDBP
        echo "unit: sectors" >> $DEDBP
        echo "" >> $DEDBP
        if [ $DEDLAB == "dos" ]; then
                echo $DEDREAL"1 : start= 2048, size= "$BOOTFSSIZE", type=83, bootable" >> $DEDBP
                echo $DEDREAL"2 : start= "$(($BOOTFSSIZE+2048))", size= "$DEDSECT", type=83" >> $DEDBP
        fi
        if [ $DEDLAB == "gpt" ]; then
                if [ -n "$EFI" ]; then
                        echo $DEDREAL"1 : start= 2048, size= "$BOOTFSSIZE", type=C12A7328-F81F-11D2-BA4B-00A0C93EC93B" >> $DEDBP
                else
                        echo $DEDREAL"1 : start= 2048, size= "$BOOTFSSIZE", type=21686148-6449-6E6F-744E-656564454649" >> $DEDBP #####OVERIT typ!!!
                fi
                echo $DEDREAL"2 : start= "$(($BOOTFSSIZE+2048))", size= "$DEDSECT", type=0FC63DAF-8483-4772-8E79-3D69D8477DE4" >> $DEDBP
        fi
        sfdisk -q $DEDREAL < $DEDBP >/dev/null
        if [ -n "$EFI" ]; then
                mkfs.vfat -Fq $DEDREAL"1" >/dev/null
        else
                mkfs.ext2 -Fq $DEDREAL"1" >/dev/null
        fi
        mkfs.ext4 -Fq $DEDREAL"2" >/dev/null
	mountded
	sizecheck
	kernelbak
	copy
	fstabedit
	if [ -d /boot/grub2 ]; then pgrub2edit; fi
	date +%F_%R > /mnt/myoscopy/.myoscopy_timestamp
        echo "topartition" > /var/tmp/myoscopy
        echo $DEDREAL"1" >> /var/tmp/myoscopy
	echo $DEDREAL"2" >> /var/tmp/myoscopy
	umount /mnt/myoscopy$BOOTMP
	umount /mnt/myoscopy
	rm -r /mnt/myoscopy	
	exit 0
}

topartition() {
        usercheck
	componentscheck
	dedreal
	sizecheckold
	collectinfo
        if [ "$DEDTYPE" != "partition" ]; then
                echo "Toto je disk!!!!!"
                exit 1
        fi
        > $LOG
        echo "============================" >> $LOG
        echo "MyOScopy Report" >> $LOG
        date >> $LOG
	echo "topartition" > /var/tmp/myoscopy
        echo $DEDREAL >> /var/tmp/myoscopy
        checkmount
        patched
        echo "Mounting backup device $DEDREAL to /mnt/myoscopy" >> $LOG
        mountded
	sizecheck
        if [ $DEL == 1 ]; then
            echo "Clearing old OS backup." >> $LOG 2>&1
            echo -en "Clearing old OS backup........................ \033[s [IN PROGRESS]"; sleep 1
            rm -rf /mnt/myoscopy/* >> $LOG 2>&1
	    echo -e "\033[u [DONE]        "; sleep 1
        fi
        echo "Running backup to $DEDREAL ." >> $LOG
        echo -ne "Running backup to $DEDREAL................... \033[s [IN PROGRESS]"
	ADDITIONALDONOTCOPY=" --exclude=$BOOTMP/* "
        copy
	date +%F_%R > /mnt/myoscopy/.myoscopy_timestamp
        echo -e "\033[u [DONE]        "; sleep 1
	fstabedit
        kernelbak
        if [ -d /boot/grub2 ]; then pgrub2edit; fi
        if [ -f /boot/grub/menu.lst ]; then pgrub01edit; fi
        if [ -f /etc/lilo.conf ]; then pliloedit; fi
        echo "Unmounting $DEDREAL and removing /mnt/myoscopy" >> $LOG
	echo -en "Unmounting $DEDREAL.......................... \033[s [IN PROGRESS]"; sleep 1
        umount /mnt/myoscopy && sleep 2; rm -r /mnt/myoscopy >> $LOG 2>&1
	echo -e "\033[u [DONE]        "; sleep 1
        echo "DONE" >> $LOG
        sendlog
        sleep 1
        rm -rf /mnt/myoscopy >> $LOG 2>&1
        cat $LOG >> $LOGFILE
        shutdonwserver
        exit 0
}

fstabedit() {
        echo -en "Editing fstab on backup device................ \033[s [IN PROGRESS]"; sleep 1
        FSTYPE=$(df -T $DEDREAL | tail -1 | awk '{print $2}')
        if [ "$DEDTYPE" == "disk" ] ; then
                if [ -n "$EFI" ]; then
                        echo $DEDREAL"1         " $BOOTMP "     vfat    umask=0077,shortname=winnt   0 2" > /mnt/myoscopy/etc/fstab
                else
                        echo $DEDREAL"1         " $BOOTMP "     ext2  defaults   0 2" > /mnt/myoscopy/etc/fstab
                fi
        elif [ "$DEDTYPE" == "partition" ] ; then
                grep " /boot" /etc/fstab > /mnt/myoscopy/etc/fstab
        fi
        echo $DED "  /  " $FSTYPE " defaults  1 1" >> /mnt/myoscopy/etc/fstab
        cp /etc/fstab /tmp/fstab
        egrep "$EXCEPTGREP" /tmp/fstab > /tmp/fstab.temp
        cat /tmp/fstab.temp >> /mnt/myoscopy/etc/fstab
        echo "fstab on backup device has been edited:" >> $LOG 2>&1
        echo "" >> $LOG
        cat /mnt/myoscopy/etc/fstab >> $LOG
        echo "" >> $LOG
        echo -e "\033[u [DONE]        "
}

dedreal() {
        if [ -b $DED ]; then
                DEDREAL=$DED
        elif [ -b /dev/$DED ]; then
                DEDREAL=/dev/$DED
        else
           echo "Destination $DEDREAL not found!" >> $LOG
           echo "Destination $DEDREAL not found!"
           cat $LOG >> $LOGFILE
           exit 1
        fi
        DEDREALNAME=$(echo $DEDREAL | sed 's:/dev/::g')
        if [ "${DEDREALNAME: -1}" -eq "${DEDREALNAME: -1}" ] &> /dev/null ; then
                DEDTYPE="partition"
        else
                DEDTYPE="disk"
        fi
}


collectinfo() {
        EFI=$(ls /boot/ |grep efi)
        DEDSECT=$(($(($TOGETHER * 1024)) / 512))
        DEDSECT=$(($(($DEDSECT / 100)) * 117))
        BYTSPERSECTOR=$(cat /sys/block/$DEDREALNAME/queue/hw_sector_size)
        BOOTMP=$(grep " /boot" /etc/fstab | awk '{print $2}')
        BOOTPART=$(df |grep " /boot" | awk '{print $1}')
	if [ "$DEDTYPE" == "partition" ] ; then BOOTPARTDED=$(cat /proc/mounts |grep " /boot" |awk '{print $1}'); fi
	if [ "$DEDTYPE" == "disk" ] ; then BOOTPARTDED=$DEDREAL"1"; fi
        BOOTPARTNAME=$(echo $BOOTPART | sed 's:/dev/::g')
	BOOTPARTDEDNAME=$(echo $BOOTPARTDED | sed 's:/dev/::g')
        SODREALNAME=$(df |grep "/boot" |awk '{print $1}'| sed 's/[0-9]*//g' |sed 's:/dev/::g')
        BOOTFSSIZE=$(cat /sys/block/$SODREALNAME/$BOOTPARTNAME/size)
        DEDSECTORS=$(cat /sys/block/$SODREALNAME/size)
	if [ "$DEDTYPE" == "partition" ] ; then BOOTUUID=$(ls -l /dev/disk/by-uuid/ | grep $BOOTPARTNAME |awk '{print $9}'); fi
	if [ "$DEDTYPE" == "disk" ] ; then BOOTUUID=$(ls -l /dev/disk/by-uuid/ | grep $BOOTPARTDEDNAME |awk '{print $9}'); fi


}

mountded() {
        mkdir /mnt/myoscopy
	if [ "$DEDTYPE" == "partition" ] ; then
        	mount $DEDREAL /mnt/myoscopy
	elif [ "$DEDTYPE" == "disk" ] ; then
        	mkdir -p /mnt/myoscopy
        	mount $DEDREAL"2" /mnt/myoscopy
        	mkdir -p /mnt/myoscopy$BOOTMP
        	mount $DEDREAL"1" /mnt/myoscopy$BOOTMP
	fi
}

copy() {
        if [ $SELINUX == 1 ]; then
                SEL="-X"
        else
                SEL=""
        fi
        DONOTCOPY=("${EXCLUDE[@]/%//*}")
        rsync -aAv $SEL --human-readable --exclude=/dev/* --exclude=/sys/* --exclude=/run/* --exclude=/proc/* --exclude=/mnt/myoscopy $ADDITIONALDONOTCOPY ${DONOTCOPY[@]/#/--exclude=} / /mnt/myoscopy | sed '0,/^$/d' >> $LOG 2>&1
}

kernelbak() {
        echo "Copying current kernel." >> $LOG 2>&1
        echo -en "Copying current kernel........................ \033[s [IN PROGRESS]"; sleep 1
        cp -f /boot/vmlinuz-`uname -r` /boot/vmlinuz-MyOScopy 2>/dev/null
        cp -f /boot/vmlinuz-huge-`uname -r` /boot/vmlinuz-MyOScopy 2>/dev/null
	cp -f /boot/initramfs-`uname -r`.img /boot/initramfs-MyOScopy.img 2>/dev/null
	echo -e "\033[u [DONE]        "; sleep 1
}

pgrub2edit() {
	GRUBCFG=$(find /boot -name grub.cfg|grep grub.cfg)
	if [ -f /etc/grub.d/50_myoscopy ]; then
		echo "MyOScopy found in GRUB 2......................  [NO CHANGE]"
		echo "MyOScopy found in GRUB 2." >> $LOG 2>&1
	else
		echo -en "Editing GRUB 2................................ \033[s [IN PROGRESS]"
		echo "MyOScopy was not found in GRUB 2." >> $LOG 2>&1
		chmod +x /etc/grub.d/50_myoscopy
		source /etc/default/grub
		echo '#!/bin/bash' > /etc/grub.d/50_myoscopy
		echo 'exec tail -n +3 $0' >> /etc/grub.d/50_myoscopy
		echo "#MyOScopy auto generated GRUB entry" >> /etc/grub.d/50_myoscopy
		echo "menuentry 'Boot from MyOSCopy disk'  {" >> /etc/grub.d/50_myoscopy
		echo "		load_video" >> /etc/grub.d/50_myoscopy
		echo "		set gfxpayload=keep" >> /etc/grub.d/50_myoscopy
		echo "		insmod gzio" >> /etc/grub.d/50_myoscopy
		echo "		insmod part_msdos" >> /etc/grub.d/50_myoscopy
		echo "		insmod ext2" >> /etc/grub.d/50_myoscopy
		echo "		insmod lvm" >> /etc/grub.d/50_myoscopy
		echo "		search --no-floppy --fs-uuid --set=root $BOOTUUID" >> /etc/grub.d/50_myoscopy
		echo "		linux16 /vmlinuz-MyOScopy root=$DED $GRUB_CMDLINE_LINUX" >> /etc/grub.d/50_myoscopy
		echo "		initrd16 /initramfs-MyOScopy.img" >> /etc/grub.d/50_myoscopy
		echo "}" >> /etc/grub.d/50_myoscopy
	        grub2-mkconfig -o $GRUBCFG &> /dev/null 
		if [ "$DEDTYPE" == "disk" ]; then
			grub2-install $DEDREAL
			cp -f $GRUBCFG /mnt/myoscopy$GRUBCFG
		fi
        	echo -e "\033[u [DONE]        "
        	echo "GRUB is configured." >> $LOG 2>&1
	fi
}

pgrub01edit() {
	GRUBCFG=$(find /boot -name grub.conf|grep grub.conf)
	if grep -q "$TITLE" $GRUBCFG ; then
		echo "MyOScopy found in GRUB........................  [NO CHANGE]"
        	echo "MyOScopy found in GRUB." >> $LOG 2>&1
	else
                echo "Editing GRUB 2................................ \033[s [IN PROGRESS]"
                echo "MyOScopy was not found in GRUB 1.X." >> $LOG 2>&1
		ROOTHD=$(cat $GRUBCFG |grep "root ("|grep -v "#"|head)
		echo "#MyOScopy auto generated GRUB entry - START" >> $GRUBCFG
		echo "title $TITLE" >> $GRUBCFG
		echo "$ROOTHD" >> $GRUBCFG
		AFTERKERNEL=$(cat /boot/grub/grub.conf |grep "kernel /vmlinuz-"| grep -v "#" |head -1| cut -d" " -f5-)
		echo "		kernel /vmlinuz-MyOScopy ro root=$DED" $AFTERKERNEL >> $GRUBCFG
		echo "		initrd /initramfs-MyOScopy.img " >> $GRUBCFG
		echo "#MyOScopy auto generated GRUB entry - END" >> $GRUBCFG
                echo "GRUB is configured."
                echo "GRUB is configured." >> $LOG 2>&1
	fi
}

pliloedit() {
	if grep -q "MyOScopy" /etc/lilo.conf ; then
		echo "MyOScopy found in LILO........................  [NO CHANGE]"
		echo "MyOScopy found in LILO." >> $LOG >&1
	else
		echo "Editing LILO..................................  [vvvv]"	
		echo "MyOScopy was not found in LILO. Configuring ..." >> $LOG 2>&1
		echo "#MyOScopy auto generated LILO entry - START" >> /etc/lilo.conf
		echo "image = /boot/vmlinuz-MyOScopy" >> /etc/lilo.conf
		echo "	root = $DED" >> /etc/lilo.conf
		echo "	label = MyOScopy" >> /etc/lilo.conf
		echo "	read-only" >> /etc/lilo.conf
		echo "#MyOScopy auto generated LILO entry - END" >> /etc/lilo.conf
		lilo 
		echo "Editing LILO..................................  [DONE]"; sleep 1
		echo "LILO is configured."  >> $LOG 2>&1
	fi
}

# POST-PROCESSES:

clear() {
	echo -en "Clearing the MyOScopy state................... \033[s [IN PROGRESS]"
        usercheck
        > $LOG
        echo "============================" >> $LOG
        echo "Clearing MyOScopy" >> $LOG
        date >> $LOG
        killall rsync >> $LOG 2>&1
        umount -l /mnt/myoscopy >> $LOG 2>&1
        sleep 1
        rm -rf /mnt/myoscopy >> $LOG 2>&1
        cat $LOG >> $LOGFILE
        echo -e "\033[u [DONE]        "; sleep 1
}

sendlog() {
          if [ $SENDEMAIL == 1 ]; then
            echo -en "Sending log to $EMAIL ....... \033[s [IN PROGRESS]"
            cat -v $LOG | mailx -r $SMTPUSER -s "MyOScopy report" -S smtp=$SMTP -S smtp-use-starttls -S smtp-auth=login -S smtp-auth-user=$SMTPUSER -S smtp-auth-password=$SMTPPASS -S ssl-verify=ignore -S nss-config-dir=$NSSCONFIGDIR $EMAIL
	    echo -e "\033[u [DONE]        "; sleep 1
          fi
}

shutdonwserver() {
        if [ $SHUT == 1 ]; then
            echo "Shutting down the system..." >> $LOGFILE 2>&1
            if [ -f $SHUTSCRIPT ]
                then
                        $SHUTSCRIPT 2>&1
                else
                        shutdown -P now 2>&1
                fi
        fi
}


# ADDITIONAL INFO:

ver() {
        echo "MyOScopy $version"
        echo "Author: Michal Muransky"
        exit 0
}

show() {
        usercheck
        if [ ! -f /var/tmp/myoscopy ]; then
                echo "WARNING: File /var/tmp/myoscopy is missing. There are probably no backups."
                exit 1
        fi
	DED=$(cat /var/tmp/myoscopy)
        mkdir /mnt/myoscopy 2> /dev/null
        mount $DED /mnt/myoscopy 2> /dev/null
        timestamp=`cat /mnt/myoscopy/.myoscopy_timestamp`
        noofiles=`du /mnt/myoscopy/ |wc -l|tail -1`
        echo "==================================================="
        echo "OS Backup created on $timestamp by $noofiles files"
        echo "==================================================="
        ls -la /mnt/myoscopy
        echo "==================================================="
        df -hP /mnt/myoscopy
        echo "==================================================="
        umount /mnt/myoscopy 2> /dev/null
        sleep 1
        rm -rf /mnt/myoscopy >> $LOG 2>&1
        exit 0
}

help() {
        echo ""
        echo "MyOScopy $version"
        echo ""
        echo "This script is used to backup whole OS to a different single partition."
        echo "Backup device is fully operational and can be booted in case of emergency."
        echo "You must be a root or to be in sudoers to be able to run MyOScopy."
        echo ""
        echo "How to use: myoscopy [OPTIONS]... [-d|--to-disk=<partition>]"
        echo ""
        echo "Arguments:"
        echo "-d <partition>, --to-disk=<partition>	Start OSCopy to destionation"
        echo "					If you are using LVM partition as the destination,"
        echo "					use path /dev/mapper/... "
        echo "-S, --shutdown				Shutdown after backup"
        echo "-x, --no-email				Report will be not sent via email"
        echo "-c, --clear				Can be used after interrupted backup"
        echo "-n, --no-delete				Do NOT delete previous backup data. Will update current backup."
        echo "					Keep in mind that rsync nees some free space for temporarry files."
        echo "-s, --show				Show last backup info"
        echo "-f, --force				Force backup and suppress all warnings."
        echo "-v, --version				Show MyOScopy version"
        echo "    --debug				Debug mode"
        echo "-h, --help				This Help page"
        echo ""
        echo "Example:"
        echo "myoscopy --to-disk=/dev/sdb1"
        echo "myoscopy -Sxd /dev/sdb1"
        echo "myoscopy -S -f -d /dev/mapper/backup_vg-backup_lv"
        echo ""
        exit 0
}

while true ; do
    case "$1" in
	-t|--test)
	    todisk
            break
            ;;
	-X|--no-selinux)
	    SELINUX=0
	    shift
	    ;;
        -n|--no-delete)
            DEL=0
            shift
            ;;
        -v|--version)
            ver
            ;;
        -f|--force)
             FORCE=1
             shift
            ;;
        -s|--show)
             show
            ;;
        -c|--clear)
            clear
            break
            ;;
        -x|--no-email)
            SENDEMAIL=0
            shift
            ;;
        --debug)
	    set -xv
	    shift
            ;;
        -h|--help)
            help
            ;;
	-d|--to-disk)
            case "$2" in
                 *) DED=$2 ; todisk ;;
            esac ;;
        -p|--to-partition)
            case "$2" in
                 *) DED=$2 ; topartition ;;
            esac ;;
        -S|--shutdown)
            SHUT=1
            shift
            ;;
        --) help ; shift ; break ;;
        *) echo "Internal error!" ; exit 1 ;;
    esac
done
