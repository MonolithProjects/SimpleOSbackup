#!/bin/bash

#title           :SimpleOSbackup
#author          :Michal Muransky
#date            :14-April-17
version=1.0



# SETTINGS ##############################################################
# Configuration file is located in /etc/sosbkp.conf 



# DEFAULTS ##############################################################
# Do not change these settings, unless you know what you are doing.
# All these settings can be overwritten by specific option. Run "sosbkp -h" to see more.

# Path to temporary log file
TEMPLOG=/tmp/sosbkp.txt

# Path to settings file
SETTINGS=/etc/sosbkp.conf

# Delete previous backup
DEL=1

# Shutdown after backup
SHUT=0

# Send email
SENDEMAIL=1

# Override the warinigs and continue
FORCE=0

# Copy SELinux permissions
SELINUX=1

# Messages width
MSGWIDTH=50


# CODE ##################################################################

TEMP=`getopt -o tXxvnsSchfp:d: --long test,no-selinux,no-delete,help,version,show,shutdown,no-email,clear,force,debug,to-partition:,to-disk: -- "$@"`
eval set -- "$TEMP"


# Checking if the Settings file exist. If not it will create one.

if [ ! -f $SETTINGS ]; then
        cat <<EOF > $SETTINGS

### Simple OS backup configuration file
### Exclude following folders from backup
EXCLUDE=(/mnt /media /lost+found)

### Log file location
LOGFILE=/var/log/myoscopy.log

### Path to custom shutdown script (optional)
SHUTSCRIPT=

### GRUB title for backup disk (This will be ignored if you are using LILO. For LILO is the title/label hardcoded as "SOSbackup")
TITLE="Boot from SOSbackup disk"

### Email address where you want to receive the report
EMAIL=youremail@yourdomain.com


### External Gmail SMTP server:

### Server address and port
SMTP="smtp.gmail.com:587"

### User name for the email account in format "something@gmail.com"
SMTPUSER="sosbkpsenderemail@gmail.com"

### Password to the email account
### You need to allow access for less secure apps - https://www.google.com/settings/security/lesssecureapps
SMTPPASS=""

### Certificates
NSSCONFIGDIR="/etc/pki/nssdb/"

EOF
else

# Read config file
source $SETTINGS
fi


# Dots displayed in messages
dots="..........................................."
dots=$dots$dots$dots
if [ ! -f $LOGFILE ]; then touch $LOGFILE ;fi
source $SETTINGS

# MANDATORY CHECKS:

# Check if the user has root rights
usercheck()  {
        wai=$(whoami 2>/dev/null)
	printf "%.${MSGWIDTH}s" "Checking the user$dots"
	printf "\033[s%s" "[PROCESSING]"; sleep 1
        if [ $wai != root ]; then
		printf "\033[u%s\n" "[ERROR - INTERRUPTED]       "
                printf "%s\n" "INFO: You must be a root."
                exit 1
        fi
	printf "\033[u%s\n" "[OK]         "
}

# Look for rsync and mailx (if the mailx is missing, SOSbackup will continue but will not send a report via email)
componentscheck() {
        printf "%.${MSGWIDTH}s" "Checking mailx$dots"
        printf "\033[s%s" "[PROCESSING]"; sleep 1
	if [ ! -f /usr/bin/mailx -o ! -f /bin/mailx ]; then
		printf "\033[u%s\n" "[MISSING]       "
		SENDEMAIL=0

	else
		printf "\033[u%s\n" "[OK]           "
	fi
        printf "%.${MSGWIDTH}s" "Checking rsync$dots"
        printf "\033[s%s" "[PROCESSING]"; sleep 1
	if [ ! -f /usr/bin/rsync ]; then
		printf "\033[u%s\n" "[ERROR - INTERRUPTED]       "
		printf "%s\n" "INFO: Please install rsync."
		exit 1
	else
		printf "\033[u%s\n" "[OK]          "
	fi
	if [ "$DEDTYPE" == "disk" ] && [ ! -f /etc/lilo.conf ]; then
		printf "%.${MSGWIDTH}s" "Checking dracut$dots"
                printf "\033[s%s" "[PROCESSING]"; sleep 1
		if [ ! -f /usr/bin/dracut ] && [ ! -f /sbin/dracut ]; then
			if [ $FORCE == 0 ]; then
				printf "\033[u%s\n" "[ERROR - INTERRUPTED]       "
                		printf "%s\n" "INFO: Please install dracut."
                		exit 1
			else
				printf "\033[u%s\n" "[ERROR]           "
			fi
		else
			printf "\033[u%s\n" "[OK]          "
		fi
	fi
}


# WARNINGS:

# Compare the destination (disk or partition) size with the source
sizecheck()     {
	printf "%.${MSGWIDTH}s" "Checking the destionation $DEDTYPE size$dots"
	printf "\033[s%s" "[PROCESSING]"; sleep 1
	PRINTSTATE="[OK]             "
        if [ $TOGETHER -gt $DEDSIZE ]; then
		if [ $FORCE == 0 ]; then
			printf "\033[u%s\n" "[ERROR - INTERRUPTED]       "
			echo "ERROR - destination is too small" >> $TEMPLOG
                        echo "Backup Interrupted!" >> $TEMPLOG
			sendlog
			cat $TEMPLOG >> $LOGFILE
                	clear
                	exit 1
		else
			PRINTSTATE="[ERROR - FORCED TO CONITUE]       "
			echo "ERROR - destination is too small" >> $TEMPLOG
			sleep 1
		fi
        fi
	printf "\033[u%s\n" "$PRINTSTATE"
}

# Check if the current running kernel was installed less than 7 days ago
patched() {
	printf "%.${MSGWIDTH}s" "Checkink last patching date$dots"
	printf "\033[s%s" "[PROCESSING]"; sleep 1
	PRINTSTATE="[OK]            "
        if [ -f /boot/vmlinuz-`uname -r` ]; then 
		LASTPATCH=$(stat -c %z /boot/vmlinuz-`uname -r` |cut -d ' ' -f 1 |tr -d "-")
       	elif [ -f /boot/vmlinuz-`uname -r`-generic ]; then
		LASTPATCH=$(stat -c %z /boot/vmlinuz-`uname -r`-generic |cut -d ' ' -f 1 |tr -d "-")
	elif [ -f /boot/vmlinuz-generic-`uname -r` ]; then
		LASTPATCH=$(stat -c %z /boot/vmlinuz-generic-`uname -r` |cut -d ' ' -f 1 |tr -d "-")
	else
		printf "\033[u%s\n" "[ERROR]       "
	secs=15
	printf "%s" "INFO: You have $secs to interrupt (Ctrl+C)."
        	while [ $secs -gt 0 ]; do
                	printf "\r%s" "INFO: You have $secs seconds to interrupt (Ctrl+C)."
                	sleep 1
                	: $((secs--))
		done
		printf "\r%s\n" "INFO: You have 0 seconds to interrupt (Ctrl+C)."
          	return
	fi 
	TODAY=$(date +%Y%m%d)
        SO=$(( ($(date --date=$TODAY +%s) - $(date --date=$LASTPATCH +%s) )/(60*60*24) ))
	if [ $SO -lt 7 ]; then
		if [ $FORCE == 0 ]; then
			printf "\033[u%s\n" "[ERROR - INTERRUPTED]       "
			echo "ERROR - Kernel was updated less thane 7 days ago" >> $TEMPLOG
			echo "Backup Interrupted!" >> $TEMPLOG
	     		sendlog
	       		cat $TEMPLOG >> $LOGFILE
			clear
               		exit 1
		else
			PRINTSTATE="[ERROR - FORCED TO CONITUE]       "
			echo "ERROR - Kernel was updated less thane 7 days ago" >> $TEMPLOG
			sleep 1
		fi
        fi
	printf "\033[u%s\n" "$PRINTSTATE"
}

# Check if the destination was mounted before SOSbackup start
checkmount() {
        printf "%.${MSGWIDTH}s" "Checkink if the destination is already mounted$dots"
        printf "\033[s%s" "[PROCESSING]"; sleep 1
	PRINTSTATE="[OK]            "
        MOUNTED=$(grep $DED /proc/mounts)
        if [ -n "$MOUNTED" ]; then
		if [ $FORCE == 0 ]; then
			printf "\033[u%s\n" "[ERROR - INTERRUPTED]       "
			echo "ERROR - backup destination is already mounted" >> $TEMPLOG
			echo "Backup Interrupted!" >> $TEMPLOG
           		sendlog
           		cat $TEMPLOG >> $LOGFILE
	   		clear
           		exit 1
		else
			PRINTSTATE="[ERROR - FORCED TO CONITUE]       "
			echo "ERROR - backup destination is already mounted" >> $TEMPLOG
			sleep 1
		fi
        fi
	printf "\033[u%s\n" "$PRINTSTATE"
}


# MAIN PROCESSES:

# Create backup to disk
todisk() {
	usercheck
	dedreal
	componentscheck
	checkmount
	patched
	collectinfo
	sizecheck
	printf "%.${MSGWIDTH}s" "Checking destination type$dots"
	printf "\033[s%s" "[PROCESSING]"; sleep 1
	if [ "$DEDTYPE" != "disk" ]; then
		printf "\033[u%s\n" "[ERROR]       "
		printf "%s" "INFO: You need to specify a disk."
		exit 1
	fi
	printf "\033[u%s\n" "[OK]           "
        > $TEMPLOG
        echo "" >> $TEMPLOG
        echo "============================" >> $TEMPLOG
        echo "SOSbackup Report" >> $TEMPLOG
        echo "Backup to partition "$DEDREAL >> $TEMPLOG
        date >> $TEMPLOG
	echo "Created the partitions "$DEDREAL"1 and "$DEDREAL"2" >> $TEMPLOG
	printf "%.${MSGWIDTH}s" "Editing partition table$dots"
        printf "\033[s%s" "[PROCESSING]"; sleep 1
        DEDBP="/tmp/dedbp"
        if [ "$DEDSECTORS" -gt 4294967292 -o "$EFI" == "yes" ]; then
                DEDLAB="gpt"
        else
                DEDLAB="dos"
        fi
        echo "unit: sectors" > $DEDBP
        echo "" >> $DEDBP
        if [ $DEDLAB == "dos" ]; then
                echo $DEDREAL"1 : start= 2048, size= "$BOOTFSSIZE", Id=83, bootable" >> $DEDBP
                echo $DEDREAL"2 : start= "$(($BOOTFSSIZE+2048))", size= "$DEDSECT", Id=83" >> $DEDBP
        fi
        if [ $DEDLAB == "gpt" ]; then
                if [ "$EFI" == "yes" ]; then
			echo "label: gpt" >> $DEDBP
                        echo $DEDREAL"1 : start= 2048, size= "$BOOTFSSIZE", Id=C12A7328-F81F-11D2-BA4B-00A0C93EC93B" >> $DEDBP
                else
                        echo $DEDREAL"1 : start= 2048, size= "$BOOTFSSIZE", Id=21686148-6449-6E6F-744E-656564454649" >> $DEDBP
                fi
                echo $DEDREAL"2 : start= "$(($BOOTFSSIZE+2048))", size= "$DEDSECT", Id=0FC63DAF-8483-4772-8E79-3D69D8477DE4" >> $DEDBP
        fi
        sfdisk --force -q $DEDREAL < $DEDBP &>/dev/null
	printf "\033[u%s\n" "[OK]        "
	printf "%.${MSGWIDTH}s" "Formatting $DEDREAL"1" and $DEDREAL"2"$dots"
        printf "\033[s%s" "[PROCESSING]"; sleep 1
        if [ "$EFI" == "yes" ]; then
                mkfs.vfat $DEDREAL"1" &>/dev/null
        else
		if [[ $SODBOOTFS == "ext"* ]]; then
			mkfs.$SODBOOTFS -Fq $DEDREAL"1" >/dev/null
		elif [[ $SODBOOTFS == "xfs" ]]; then
			mkfs.$SODBOOTFS -fq $DEDREAL"1" >/dev/null
		else
			mkfs.$SODBOOTFS -Fq $DEDREAL"1" >/dev/null
		fi
        fi
	if [[ $SODROOTFS == "ext"* ]]; then
        	mkfs.$SODROOTFS -Fq $DEDREAL"2" >/dev/null
	elif [[ $SODROOTFS == "xfs" ]]; then
		mkfs.$SODROOTFS -fq $DEDREAL"2" >/dev/null
	else
		mkfs.ext4 -Fq $DEDREAL"2" >/dev/null
	fi
	printf "\033[u%s\n" "[OK]        "
	echo "Formated "$DEDREAL"1 to "$SODBOOTFS >> $TEMPLOG
	echo "Formated "$DEDREAL"2 to "$SODROOTFS >> $TEMPLOG
	mountded
	kernelbak
	ADDITIONALDONOTCOPY=""
	copy
	if [ $EFI == "yes" ]; then
		BOOTUUID=$(ls -l /dev/disk/by-uuid/ | grep $DEDREALNAME"2" |awk '{print $9}')
	else
		BOOTUUID=$(ls -l /dev/disk/by-uuid/ | grep $DEDREALNAME"1" |awk '{print $9}')
	fi
	fstabedit
	if [ -d /etc/grub.d ] && [ -n "$(dd if=/dev/$SODREALNAME bs=512 count=1 2>&1 |grep GRUB)" ]; then grub2edit
	elif [ -d /etc/grub.d ] && [ $EFI == "yes" ]; then grub2edit
	fi
	if [ -f /boot/grub/grub.conf ] && [ -n "$(dd if=/dev/$SODREALNAME bs=512 count=1 2>&1 |grep GRUB)" ]; then grub01edit; fi
	if [ -f /etc/lilo.conf ] && [ -n "$(dd if=/dev/$SODREALNAME bs=512 count=1 2>&1 |grep LILO)" ]; then liloedit; fi
	date +%F_%R > /mnt/sosbkp/.sosbkp_timestamp
        echo BACKUPTO="disk" > /var/tmp/sosbkp_info
        echo DEDREAL1=$DEDREAL"1" >> /var/tmp/sosbkp_info
	echo DEDREAL2=$DEDREAL"2" >> /var/tmp/sosbkp_info
	echo BOOTMP=$BOOTMP >> /var/tmp/sosbkp_info
	printf "%.${MSGWIDTH}s" "Unmounting backup device$dots"
	printf "\033[s%s" "[PROCESSING]"; sleep 1
	umount /mnt/sosbkp$BOOTMP
	umount /mnt/sosbkp
	printf "\033[u%s\n" "[OK]         "
	rm -fr /mnt/sosbkp	
        echo "Unmounted the backup device" >> $TEMPLOG
        echo "Backup was successfull" >> $TEMPLOG
        sendlog
        sleep 1
        rm -rf /mnt/sosbkp > /dev/null
        cat $TEMPLOG >> $LOGFILE
        shutdonwserver
	exit 0
}

# Create backup to partition
topartition() {
        usercheck
	dedreal
	componentscheck
	checkmount
	mountded
	collectinfo
	sizecheck
	printf "%.${MSGWIDTH}s" "Checking destination type$dots"
        printf "\033[s%s" "[PROCESSING]"; sleep 1
        if [ "$DEDTYPE" != "partition" ]; then
                printf "\033[u%s\n" "[ERROR]           "
		printf "%s" "INFO: You need to specify a partition or LVM disk."
                exit 1
        fi
	printf "\033[u%s\n" "[OK]           "
        > $TEMPLOG
	echo "" >> $TEMPLOG
        echo "============================" >> $TEMPLOG
        echo "SOSbackup Report" >> $TEMPLOG
	echo "Backup to partition "$DEDREAL >> $TEMPLOG
        date >> $TEMPLOG
	echo "topartition" > /var/tmp/sosbkp
        echo $DEDREAL >> /var/tmp/sosbkp
        patched
        if [ $DEL == 1 ]; then
		printf "%.${MSGWIDTH}s" "Clearing old OS backup$dots"
		printf "\033[s%s" "[PROCESSING]"; sleep 1
		rm -rf /mnt/sosbkp/* >> $TEMPLOG 2>&1
		printf "\033[u%s\n" "[OK]         "
		echo "Cleared old OS backup" >> $TEMPLOG
        fi
	ADDITIONALDONOTCOPY=" --exclude=$BOOTMP/* "
        copy
	date +%F_%R > /mnt/sosbkp/.sosbkp_timestamp
        echo BACKUPTO="partition" > /var/tmp/sosbkp_info
        echo DEDREAL=$DEDREAL >> /var/tmp/sosbkp_info
        echo BOOTMP=$BOOTMP >> /var/tmp/sosbkp_info
	fstabedit
        kernelbak
        if [ -d /etc/grub.d ] && [ -n "$(dd if=/dev/$SODREALNAME bs=512 count=1 2>&1 |grep GRUB)" ]; then grub2edit
        elif [ -d /etc/grub.d ] && [ $EFI == "yes" ]; then grub2edit
        fi
	if [ -f /boot/grub/grub.conf ] && [ -n "$(dd if=/dev/$SODREALNAME bs=512 count=1 2>&1 |grep GRUB)" ]; then grub01edit; fi
        if [ -f /etc/lilo.conf ] && [ -n "$(dd if=/dev/$SODREALNAME bs=512 count=1 2>&1 |grep LILO)" ]; then liloedit; fi
	printf "%.${MSGWIDTH}s" "Unmounting the backup device $dots"
	printf "\033[s%s" "[PROCESSING]"; sleep 1
        umount /mnt/sosbkp > /dev/null && sleep 2; rm -r /mnt/sosbkp >> $TEMPLOG
	printf "\033[u%s\n" "[OK]         "
	echo "Unmounted the backup device" >> $TEMPLOG
        echo "Backup was successfull" >> $TEMPLOG
        sendlog
        sleep 1
        rm -rf /mnt/sosbkp > /dev/null
        cat $TEMPLOG >> $LOGFILE
        shutdonwserver
        exit 0
}


# SUPPORTING FUNCTIONS

# Edit fstab
fstabedit() {
	printf "%.${MSGWIDTH}s" "Editing fstab on backup device$dots"
        printf "\033[s%s" "[PROCESSING]"; sleep 1
        if [ "$DEDTYPE" == "disk" ] ; then
                if [ "$EFI" == "yes" ]; then
                        echo $DEDREAL"1         " $BOOTMP "     vfat    umask=0077,shortname=winnt   0 2" > /mnt/sosbkp/etc/fstab
                else
                        echo $DEDREAL"1         " $BOOTMP "     $SODBOOTFS  defaults   0 2" > /mnt/sosbkp/etc/fstab
                fi
		echo $DEDREAL"2         /  " $SODROOTFS " defaults  1 1" >> /mnt/sosbkp/etc/fstab
        elif [ "$DEDTYPE" == "partition" ] ; then
                grep " /boot" /etc/fstab > /mnt/sosbkp/etc/fstab
		echo $DEDREAL "       /  " $SODROOTFS " defaults  1 1" >> /mnt/sosbkp/etc/fstab
        fi
        egrep "$EXCEPTGREP" /etc/fstab > /tmp/fstab.temp
        cat /tmp/fstab.temp >> /mnt/sosbkp/etc/fstab
        cat /mnt/sosbkp/etc/fstab >> $TEMPLOG
        printf "\033[u%s\n" "[OK]         "
	echo "Edited fstab" >> $TEMPLOG
}

# Real path to destination
dedreal() {
	printf "%.${MSGWIDTH}s" "Looking for destination$dots"
        printf "\033[s%s" "[PROCESSING]"; sleep 1
        if [ -b $DED ]; then
                DEDREAL=$DED
        elif [ -b /dev/$DED ]; then
                DEDREAL=/dev/$DED
        else
           #echo "Destination $DED not found!" >> $LOG
           printf "\033[u%s\n" "[ERROR]       "
	   printf "%s" "INFO: Destination $DED was not found."
           cat $TEMPLOG >> $LOGFILE
           exit 1
        fi
        DEDREALNAME=$(echo $DEDREAL | sed 's:/dev/::g')
        if [ "${DEDREALNAME: -1}" -eq "${DEDREALNAME: -1}" ] &> /dev/null ; then
                DEDTYPE="partition"
	elif [[ $DEDREALNAME == "mapper"* ]]; then
		DEDTYPE="partition"
        else
                DEDTYPE="disk"
        fi
	printf "\033[u%s\n" "[OK]         "
	echo "Destination $DED does exist" >> $TEMPLOG
}

# Collect information
collectinfo() {
        printf "%.${MSGWIDTH}s" "Collectiong information$dots"
        printf "\033[s%s" "[PROCESSING]"; sleep 1
	SODBOOTFS=$(df -T /boot | grep -v Type |awk '{print $2}')
	SODROOTFS=$(df -T / | grep -v Type |awk '{print $2}')
        EXCEPTGREP=${EXCLUDE[@]/#/|}; EXCEPTGREP=$(echo "$EXCEPTGREP"| cut -c 2- |tr -d " \t\n\r" )
        WHAT=$(cat /etc/fstab |grep -vE "#|swap|SWAP|sosbkp" |grep -vE "$EXCEPTGREP" | grep -E "UUID|/dev" |awk '{print $2}'| sed ':a;N;$!ba;s/\n/ /g')
        NLINES=$(df -kP $WHAT | sed 1d |uniq | wc -l)
        COUNTER=0
        TOGETHER=0
        while [ $COUNTER -lt $NLINES ]; do
                let COUNTER=COUNTER+1
                LINE=$(df -kP $WHAT | grep -v "df"| sed 1d |uniq |awk '{print $3}'|sed "${COUNTER}q;d")
                TOGETHER=$(expr $TOGETHER + $LINE)
        done
        mkdir -p /mnt/sosbkp
        DEDSIZE=$(df -kP /mnt/sosbkp | sed 1d |awk '{print $2}')

        if [ -d /sys/firmware/efi ]; then EFI="yes" ; else EFI="no" ; fi
        DEDSECT=$(($(($TOGETHER * 1024)) / 512))
        DEDSECT=$(($(($DEDSECT / 100)) * 117))
        if [ "$DEDTYPE" == "disk" ] ; then 
		BYTSPERSECTOR=$(cat /sys/block/$DEDREALNAME/queue/hw_sector_size)
	else 
		BYTSPERSECTOR=0
	fi
        BOOTMP=$(grep " /boot" /etc/fstab | grep -v "#" | awk '{print $2}')
        BOOTPART=$(df |grep " /boot" | awk '{print $1}')
	if [ "$DEDTYPE" == "partition" ] ; then BOOTPARTDED=$(cat /proc/mounts |grep " /boot" |awk '{print $1}'); fi
	if [ "$DEDTYPE" == "disk" ] ; then BOOTPARTDED=$DEDREAL"1"; fi
        BOOTPARTNAME=$(echo $BOOTPART | sed 's:/dev/::g')
	BOOTPARTDEDNAME=$(echo $BOOTPARTDED | sed 's:/dev/::g')
        SODREALNAME=$(df |grep "/boot" |awk '{print $1}'| sed 's/[0-9]*//g' |sed 's:/dev/::g')
        BOOTFSSIZE=$(cat /sys/block/$SODREALNAME/$BOOTPARTNAME/size)
        DEDSECTORS=$(cat /sys/block/$SODREALNAME/size)
	SOBOOTUUID=$(ls -l /dev/disk/by-uuid/ | grep $BOOTPARTNAME |awk '{print $9}')
	if [ "$DEDTYPE" == "partition" ]; then 
		BOOTUUID=$(ls -l /dev/disk/by-uuid/ | grep $BOOTPARTNAME |awk '{print $9}') 
		SOROOTUUID=$(ls -l /dev/disk/by-uuid/ | grep $DEDREALNAME |awk '{print $9}')
	fi
	# BOOTUUID for disk is in the function todisk
	printf "\033[u%s\n" "[OK]        "
}

# Mount destination
mountded() {
        printf "%.${MSGWIDTH}s" "Mounting backup device$dots"
        printf "\033[s%s" "[PROCESSING]"; sleep 1
        mkdir -p /mnt/sosbkp > /dev/null
	if [ "$DEDTYPE" == "partition" ] ; then
        	mount $DEDREAL /mnt/sosbkp
	elif [ "$DEDTYPE" == "disk" ] ; then
        	mount $DEDREAL"2" /mnt/sosbkp
        	mkdir -p /mnt/sosbkp$BOOTMP
        	mount $DEDREAL"1" /mnt/sosbkp$BOOTMP
	fi
	printf "\033[u%s\n" "[OK]         "
	echo "Backup device has been mounted" >> $TEMPLOG
}

# Copy the data
copy() {
	printf "%.${MSGWIDTH}s" "Running backup$dots"
        printf "\033[s%s" "[PROCESSING]"; sleep 1
        if [ $SELINUX == 1 ]; then
                SEL="-X"
        else
                SEL=""
        fi
        DONOTCOPY=("${EXCLUDE[@]/%//*}")
        rsync -aAv $SEL --human-readable --exclude=/dev/* --exclude=/sys/* --exclude=/run/* --exclude=/proc/* --exclude=/mnt/sosbkp $ADDITIONALDONOTCOPY ${DONOTCOPY[@]/#/--exclude=} / /mnt/sosbkp | sed '0,/^$/d' >> $TEMPLOG
	printf "\033[u%s\n" "[OK]         "
}

# Backup the current kernel and rename (replace kernel version in the name with a word SOSbackup)
kernelbak() {
	printf "%.${MSGWIDTH}s" "Creating copy of current kernel$dots"
        printf "\033[s%s" "[PROCESSING]"; sleep 1
        cp -f /boot/vmlinuz-`uname -r` /boot/vmlinuz-SOSbackup 2>/dev/null
        cp -f /boot/vmlinuz-huge-`uname -r` /boot/vmlinuz-SOSbackup 2>/dev/null
	cp -f /boot/initramfs-`uname -r`.img /boot/initramfs-SOSbackup.img 2>/dev/null
	cp -f /boot/initrd.img-`uname -r` /boot/initramfs-SOSbackup.img 2>/dev/null
	printf "\033[u%s\n" "[OK]         "
	echo "Created backup of current kernel" >> $TEMPLOG
}

# Edit GRUB 2
grub2edit() {
	printf "%.${MSGWIDTH}s" "Editing GRUB 2$dots"
        printf "\033[s%s" "[PROCESSING]"; sleep 1
	GRUBCFG=$(find /boot -name grub.cfg|grep grub.cfg|head -1)
	DEDROOTREAL=$(df |grep "/mnt/sosbkp$" |awk '{print $1}')
	if [ -f /etc/grub.d/50_sosbkp ]; then
		PRINTSTATE="[NO CHANGE]       "
		echo "No change in GRUB 2" >> $TEMPLOG
	else
		if [ $EFI == "yes" ]; then
			KERNELPATH="/boot"
		else
			KERNELPATH=""
		fi
		echo "SOSbackup was not found in GRUB 2." >> $TEMPLOG 2>&1
		source /etc/default/grub
		echo '#!/bin/bash' > /etc/grub.d/50_sosbkp
		echo 'exec tail -n +3 $0' >> /etc/grub.d/50_sosbkp
		echo "#SOSbackup auto generated GRUB entry" >> /etc/grub.d/50_sosbkp
		echo "menuentry 'Boot from SOSbackup disk'  {" >> /etc/grub.d/50_sosbkp
		echo "		load_video" >> /etc/grub.d/50_sosbkp
		echo "		set gfxpayload=keep" >> /etc/grub.d/50_sosbkp
		echo "		insmod gzio" >> /etc/grub.d/50_sosbkp
		if [ $EFI == "yes" ];then
			echo "		insmod part_gpt" >> /etc/grub.d/50_sosbkp
		else
			echo "		insmod part_msdos" >> /etc/grub.d/50_sosbkp
		fi
		echo "		insmod ext2" >> /etc/grub.d/50_sosbkp
		if [ $SODROOTFS == "xfs" -o $SODBOOTFS == "xfs" ]; then echo "		insmod xfs" >> /etc/grub.d/50_sosbkp ; fi
		echo "		insmod lvm" >> /etc/grub.d/50_sosbkp
		if [ "$DEDTYPE" == "partition" ] && [ $EFI == "yes" ]; then
			echo "          search --no-floppy --fs-uuid --set=root $SOROOTUUID" >> /etc/grub.d/50_sosbkp
		else
			echo "		search --no-floppy --fs-uuid --set=root $BOOTUUID" >> /etc/grub.d/50_sosbkp
		fi
		echo "		linux "$KERNELPATH"/vmlinuz-SOSbackup root=$DEDROOTREAL ro $GRUB_CMDLINE_LINUX" >> /etc/grub.d/50_sosbkp
		echo "		initrd "$KERNELPATH"/initramfs-SOSbackup.img" >> /etc/grub.d/50_sosbkp
		echo "}" >> /etc/grub.d/50_sosbkp
		chmod a+x /etc/grub.d/50_sosbkp
		if [ -f /usr/sbin/grub2-mkconfig ]; then
			grub2-mkconfig -o $GRUBCFG &> /dev/null
		elif [ -f /usr/sbin/grub-mkconfig ]; then
			grub-mkconfig -o $GRUBCFG &> /dev/null
		else
			grub2-mkconfig -o $GRUBCFG &> /dev/null
		fi
	        grub2-mkconfig -o $GRUBCFG &> /dev/null 
		if [ "$DEDTYPE" == "disk" ]; then
			mount --bind /dev /mnt/sosbkp/dev
			mount --bind /sys /mnt/sosbkp/sys
			mount --bind /run /mnt/sosbkp/run
			mount --bind /proc /mnt/sosbkp/proc
			chroot /mnt/sosbkp /bin/bash -c "dracut --force --regenerate-all" &> /dev/null
			#grub2-install $DEDREAL &> /dev/null ###GRUB INSTALLATION TO BACKUP DISK DOES NOT WORK
			cp -f $GRUBCFG /mnt/sosbkp$GRUBCFG
			umount /mnt/sosbkp/dev
			umount /mnt/sosbkp/sys
			umount /mnt/sosbkp/run
			umount /mnt/sosbkp/proc
		fi
		PRINTSTATE="[OK]         "
        	echo "GRUB 2 is configured" >> $TEMPLOG
	fi
	printf "\033[u%s\n" "$PRINTSTATE"
}

# Edit Legacy GRUB
grub01edit() {
        printf "%.${MSGWIDTH}s" "Editing GRUB$dots"
        printf "\033[s%s" "[PROCESSING]"; sleep 1
	GRUBCFG=$(find /boot -name grub.conf|grep grub.conf)
	DEDROOTREAL=$(df |grep "/mnt/sosbkp$" |awk '{print $1}')
	DEVMAP=$(find /boot -name device.map)
	if [ "$DEDTYPE" == "disk" ]; then
		if grep -q "$DEDREAL" $DEVMAP ; then
			echo "Backup defice was found in devices.map" >> $TEMPLOG
		else
			echo "Editing devices.map" >> $TEMPLOG
			mv -f /mnt/sosbkp$DEVMAP /mnt/sosbkp$DEVMAP.bak; exit | grub --device-map=/mnt/sosbkp$DEVMAP &> /dev/null
		fi
	fi
	if grep -q "$TITLE" $GRUBCFG ; then
		PRINTSTATE="[NO CHANGE]       "
		echo "No change in Legacy GRUB" >> $TEMPLOG
	else
                echo "SOSbackup was not found in GRUB 1.X." >> $TEMPLOG 2>&1
		if [ "$DEDTYPE" == "partition" ]; then ROOTHD=$(cat $GRUBCFG |grep "root ("|grep -v "#"|head -1); fi
		if [ "$DEDTYPE" == "disk" ]; then ROOTHD=$(cat /mnt/sosbkp$DEVMAP |grep $DEDREAL| cut -c 1-4); ROOTHD="        root $ROOTHD,0)"; fi
		echo "#SOSbackup auto generated GRUB entry - START" >> $GRUBCFG
		echo "title $TITLE" >> $GRUBCFG
		echo "$ROOTHD" >> $GRUBCFG
		AFTERKERNEL=$(cat /boot/grub/grub.conf |grep "kernel /vmlinuz-"| grep -v "#" |head -1| cut -d" " -f5-)
		echo "		kernel /vmlinuz-SOSbackup ro root=$DEDROOTREAL" $AFTERKERNEL >> $GRUBCFG
		echo "		initrd /initramfs-SOSbackup.img " >> $GRUBCFG
		echo "#SOSbackup auto generated GRUB entry - END" >> $GRUBCFG
                if [ "$DEDTYPE" == "disk" ]; then
			cp -f $GRUBCFG /mnt/sosbkp$GRUBCFG
                        mount --bind /dev /mnt/sosbkp/dev
                        mount --bind /sys /mnt/sosbkp/sys
                        mount --bind /run /mnt/sosbkp/run &> /dev/null
                        mount --bind /proc /mnt/sosbkp/proc
                        chroot /mnt/sosbkp /bin/bash -c "dracut --force /boot/initramfs-SOSbackup.img"
			#grub-install $DEDREAL > /dev/null ###GRUB INSTALLATION TO BACKUP DISK DOES NOT WORK
                        umount /mnt/sosbkp/dev
                        umount /mnt/sosbkp/sys
                        umount /mnt/sosbkp/run &> /dev/null
                        umount /mnt/sosbkp/proc
                fi
		PRINTSTATE="[OK]            "
		echo "Legacy GRUB edited" >> $TEMPLOG
	fi
	printf "\033[u%s\n" "$PRINTSTATE"
}

# Edit LILO
liloedit() {
        printf "%.${MSGWIDTH}s" "Editing LILO$dots"
        printf "\033[s%s" "[PROCESSING]"; sleep 1
	if grep -q "SOSbackup" /etc/lilo.conf ; then
		PRINTSTATE="[NO CHANGE]            "
		echo "No change in LILO"  >> $TEMPLOG
	else
		echo "SOSbackup was not found in LILO. Configuring ..." >> $TEMPLOG 2>&1
		echo "#SOSbackup auto generated LILO entry - START" >> /etc/lilo.conf
		echo "image = /boot/vmlinuz-SOSbackup" >> /etc/lilo.conf
		if [ "$DEDTYPE" == "partition" ]; then echo "	root = $DEDREAL" >> /etc/lilo.conf ;fi
		if [ "$DEDTYPE" == "disk" ]; then echo "	root = $DEDREAL"2 >> /etc/lilo.conf ;fi
		echo "	label = SOSbackup" >> /etc/lilo.conf
		echo "	read-only" >> /etc/lilo.conf
		echo "#SOSbackup auto generated LILO entry - END" >> /etc/lilo.conf
		cp -f /etc/lilo.conf /mnt/sosbkp/etc/lilo.conf
		lilo &> /dev/null
		if [ "$DEDTYPE" == "disk" ]; then
			sed -i 's:'"boot = /dev/$SODREALNAME"':'"boot = $DEDREAL"':g' /mnt/sosbkp/etc/lilo.conf
			lilo -C /mnt/sosbkp/etc/lilo.conf -b $DEDREAL &> /dev/null
		fi
		PRINTSTATE="[OK]            "
		echo "LILO is edited"  >> $TEMPLOG
	fi
	printf "\033[u%s\n" "$PRINTSTATE"
}


# STANDALONE FNCTIONS:

# Clear the interrupted backup
clear() {
	printf "%.${MSGWIDTH}s" "Clearing the SOSbackup temp files$dots"
        printf "\033[s%s" "[PROCESSING]"; sleep 1
        if [ ! -f "$TEMPLOG" ]; then touch $TEMPLOG ; fi
        echo "============================" >> $TEMPLOG
        echo "Clearing SOSbackup" >> $TEMPLOG
        date >> $TEMPLOG
        killall rsync >> $TEMPLOG 2> /dev/null
        umount -R /mnt/sosbkp >> $TEMPLOG 2> /dev/null
	umount -R /mnt/sosbkp >> $TEMPLOG 2> /dev/null
        sleep 1
        rm -rf /mnt/sosbkp >> $TEMPLOG 2> /dev/null
	echo "SOSbackup processes was cleared" >> $TEMPLOG
        cat $TEMPLOG >> $LOGFILE
	printf "\033[u%s\n" "[OK]         "
}

# Send backup report via email
sendlog() {
	if [ $SENDEMAIL == 1 ]; then
		printf "%.${MSGWIDTH}s" "Sending log to $EMAIL$dots"
		printf "\033[s%s" "[PROCESSING]"; sleep 1
		if [ -z $SMTPPASS ]; then
			PRINTSTATE="[ERROR]            "
		else
			cat -v $TEMPLOG | mailx -r $SMTPUSER -s "SOSbackup report" -S smtp=$SMTP -S smtp-use-starttls -S smtp-auth=login -S smtp-auth-user=$SMTPUSER -S smtp-auth-password=$SMTPPASS -S ssl-verify=ignore -S nss-config-dir=$NSSCONFIGDIR $EMAIL 2> /dev/null
			PRINTSTATE="[OK]            "
		fi
		printf "\033[u%s\n" "$PRINTSTATE"
	fi
}

# Shutdown the machine
shutdonwserver() {
        if [ $SHUT == 1 ]; then
		printf "%s\n" "INFO: Shutting down the system..."
		echo "Shutting down the system..." >> $LOGFILE 
		if [ -f "$SHUTSCRIPT" ]
                	then
                        	$SHUTSCRIPT
                	else
                        	shutdown -h now 
                fi
        fi
}


# ADDITIONAL INFO (you don't need to be root for this):

# Version of SOSbackup
ver() {
        echo "SimpleOSbackup $version"
        echo "Author: Michal Muransky"
	echo "2017"
        exit 0
}

# Show the last backup info
show() {
        usercheck
	printf "%.${MSGWIDTH}s" "Preparing all the information$dots"
	printf "\033[s%s" "[PROCESSING]"
        if [ ! -f /var/tmp/sosbkp_info ]; then
		 printf "\033[u%s\n" "[ERROR]      "
                 printf "INFO: There is no known backup."
                exit 1
        fi
	source /var/tmp/sosbkp_info
	mkdir -p /mnt/sosbkp 2> /dev/null
	if [ "$BACKUPTO" == "partition" ]; then
		mount $DEDREAL /mnt/sosbkp
	elif [ "$BACKUPTO" == "disk" ]; then
		mount $DEDREAL2 /mnt/sosbkp
		mount $DEDREAL1 /mnt/sosbkp$BOOTMP 
	else
		printf "\033[u%s\n" "[ERROR]       "
		printf "INFO: Unable to determine last backup destination."
	fi
	printf "\033[u%s\n" "[OK]        "
        TIMESTAMP=$(cat /mnt/sosbkp/.sosbkp_timestamp)
        NOOFILES=$(du /mnt/sosbkp/ |wc -l|tail -1)
        echo "==================================================="
        echo "SOS Backup created on $TIMESTAMP consist of $NOOFILES files"
	if [ "$BACKUPTO" == "partition" ]; then echo "Last backup was to partition ( option -p )"; fi
	if [ "$BACKUPTO" == "disk" ]; then echo "Last backup was to disk ( option -d )"; fi
        echo "==================================================="
        ls -l /mnt/sosbkp
        echo "==================================================="
	if [ "$BACKUPTO" == "disk" ]; then df -hP /mnt/sosbkp$BOOTMP ; fi
        df -hP /mnt/sosbkp
        echo "==================================================="
        umount --recursive /mnt/sosbkp 2> /dev/null
        sleep 1
        exit 0
}

# It is what it is :)
help() {
        echo ""
        echo "SimpleOSbackup $version"
        echo ""
	echo "SimpleOSbackup or simply - SOSbackup is a bash shell script used for backup of Linux OS system."
	echo "You can run backup to a partition or whole disk. In case you are running backup to a partition,"
	echo 'the backup will exclude "boot" fs (/boot, /boot/efi etc.). If you are running backup to a disk,'
	echo 'SOSbackup will erease current partition table on it (if there is any) and create a new one.'
	echo "More info in the section of specific functions." 
        echo "Backup is fully operational and can choosen from GRUB or LILO menu. The boot loader on the original"
	echo "disk is still needed. So far the boot loader on the backup device does not work. In the situation"
	echo "where your original disk will break up you will need to install the GRUB or LILO manually to the backup"
	echo 'device. One day maybe i will implement that into the script too :). However, the boot loader config'
	echo "file will be configured by SOSbackup so you will not need to edit it manually."
        echo "You must be a root or to be able to run SOSbackup for OS backup."
	echo "This script was tested on several Linux distributions in various configurations."
	echo ""
	echo "I am not responsible for any damage done using this tool."
        echo ""
	echo ""
        echo "How to use: sosbkp [OPTIONS]..."
        echo ""
        echo "Arguments:"
        echo '-p <partition>, --to-partition=<partition>	Start SOSbackup to the partition'
	echo "					THIS OPTION NEEDS TO BE ON THE END OF THE COMMAND"
	echo "					Partition needs to be formated before you start SOSbackup."
        echo "					If you are using LVM partition as the destination,"
        echo '					use path /dev/mapper/... '
	echo "					SOSbackup wil erease all data on the partition by default."
	echo ""
	echo "-d <disk>, --to-disk=<disk>		Start SOSbackup to the disk." 
	echo "					THIS OPTION NEEDS TO BE ON THE END OF THE COMMAND"
	echo "					SOSbackup will erease existing partitions on the backup"
	echo "					backup device any and create two new partitions."
	echo "					The first one is for boot fs and the second for the rest of the data."
	echo "					SOSbackup will edit boot loader menu and add the new boot device."
	echo '					The backup device will be not bootable (even the configuration'
	echo '					files are ready and do not need to be edited). In case your'
	echo "					original boot device will fail or damage, you will need to"
	echo '					install the boot loader to the new disk (beckup disk).'
	echo ""
        echo "-S, --shutdown				Shutdown after backup"
	echo ""
        echo "-x, --no-email				Report will be not sent via email"
	echo ""
	echo "-X, --no-selinux			Do not copy SELinux labels"
	echo ""
        echo "-c, --clear				Can be used after interrupted backup"
	echo ""
        echo "-n, --no-delete				Do NOT delete previous backup data. Will update current backup."
	echo ""
        echo "					Keep in mind that rsync needs some free space for temporarry files."
	echo ""
        echo "-s, --show				Show last backup info"
	echo ""
        echo '-f, --force				Force backup and suppress warnings. (Missing rsync can not be suppresed)'
	echo ""
        echo "-v, --version				Show SOSbackup version"
	echo ""
        echo "    --debug				Debug mode"
	echo ""
        echo "-h, --help				This Help page"
        echo ""
	echo ""
        echo "Examples:"
        echo "sosbkp --to-partition=/dev/sdb1"
        echo "sosbkp -Sxp /dev/sdb1"
	echo "sosbkp -S -f -p /dev/mapper/backup_vg-backup_lv"
	echo "sosbkp --no-selinux -d /dev/sdc"
        echo "sosbkp -d sdc"
        echo ""
        exit 0
}

while true ; do
    case "$1" in
	-X|--no-selinux)
	    SELINUX=0
	    shift
	    ;;
        -n|--no-delete)
            DEL=0
            shift
            ;;
        -v|--version)
            ver
            ;;
        -f|--force)
             FORCE=1
             shift
            ;;
        -s|--show)
             show
            ;;
        -c|--clear)
	    usercheck
            clear
	    break
            ;;
        -x|--no-email)
            SENDEMAIL=0
            shift
            ;;
        --debug)
	    set -xv
	    shift
            ;;
        -h|--help)
            help
            ;;
	-d|--to-disk)
            case "$2" in
                 *) DED=$2 ; todisk ;;
            esac ;;
        -p|--to-partition)
            case "$2" in
                 *) DED=$2 ; topartition ;;
            esac ;;
        -S|--shutdown)
            SHUT=1
            shift
            ;;
        --) help ; shift ; break ;;
        *) echo "Internal error!" ; exit 1 ;;
    esac
done
