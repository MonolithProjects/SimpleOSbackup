#!/bin/bash

#title           :SimpleOSbackup
#author          :Michal Muransky
#date            :19-March-17
version=1.0-alpha-3



# SETTINGS ##############################################################
# Configuration file is located in /etc/sosbkp.conf 



# DEFAULTS ##############################################################
# Do not change these settings, unless you know what you are doing.
# All these settings can be overwritten by specific option. Run "sosbkp -h" to see more.

# Path to temporary log file
LOG=/tmp/sosbkp.txt

# Path to settings file
SETTINGS=/etc/sosbkp.conf

# Delete previous backup
DEL=1

# Shutdown after backup
SHUT=0

# Send email
SENDEMAIL=1

# Override the warinigs and continue
FORCE=0

# Copy SELinux permissions
SELINUX=1

# Messages width
MSGWIDTH=50


# CODE ##################################################################

TEMP=`getopt -o tXxvnsSchfp:d: --long test,no-selinux,no-delete,help,version,show,shutdown,no-email,clear,force,debug,to-partition:,to-disk: -- "$@"`
eval set -- "$TEMP"

# Clearing and reading Settings file
LOGFILE=""
SHUTSCRIPT=""
TITLE=""
EMAIL=""
SMTP=""
SMTPUSER=""
SMTPPASS=""
NSSCONFIGDIR=""
ADDITIONALDONOTCOPY=""
dots="..........................................."
dots=$dots$dots$dots
source $SETTINGS

# MANDATORY CHECKS:

usercheck()  {
        wai=$(whoami 2>/dev/null)
	printf "%.${MSGWIDTH}s" "Checking the user$dots"
	printf "\033[s%s" "[PROCESSING]"; sleep 1
        if [ $wai != root ]; then
		printf "\033[u%s\n" "[ERROR - INTERRUPTED]       "
                printf "%s\n" "INFO: You must be a root."
                exit 1
        fi
	printf "\033[u%s\n" "[OK]         "
}

componentscheck() {
        printf "%.${MSGWIDTH}s" "Checking mailx$dots"
        printf "\033[s%s" "[PROCESSING]"; sleep 1
	if [ ! -f /usr/bin/mailx -o ! -f /bin/mailx ]; then
		printf "\033[u%s\n" "[MISSING]       "
		SENDEMAIL=0

	else
		printf "\033[u%s\n" "[OK]          "
	fi
        printf "%.${MSGWIDTH}s" "Checking rsync$dots"
        printf "\033[s%s" "[PROCESSING]"; sleep 1
	if [ ! -f /usr/bin/rsync ]; then
		printf "\033[u%s\n" "[ERROR - INTERRUPTED]       "
		printf "%s\n" "INFO: Please install rsync."
		exit 1
	else
		printf "\033[u%s\n" "[OK]          "
	fi
}


# WARNINGS:

sizecheck()     {
	printf "%.${MSGWIDTH}s" "Checking the destionation $DEDTYPE size$dots"
	printf "\033[s%s" "[PROCESSING]"; sleep 1
	PRINTSTATE="[OK]             "
        if [ $TOGETHER -gt $DEDSIZE ]; then
		if [ $FORCE == 0 ]; then
			printf "\033[u%s\n" "[ERROR - INTERRUPTED]       "
			sendlog
			cat $LOG >> $LOGFILE
                	clear
                	exit 1
		else
			PRINTSTATE="[ERROR - FORCED TO CONITUE]       "
			sleep 1
		fi
        fi
	printf "\033[u%s\n" "$PRINTSTATE"
}


patched() {
	printf "%.${MSGWIDTH}s" "Checkink last patching date$dots"
	printf "\033[s%s" "[PROCESSING]"; sleep 1
	PRINTSTATE="[OK]            "
        if [ -f /boot/vmlinuz-`uname -r` ]; then 
		LASTPATCH=$(stat -c %z /boot/vmlinuz-`uname -r` |cut -d ' ' -f 1 |tr -d "-")
       	elif [ -f /boot/vmlinuz-`uname -r`-generic ]; then
		LASTPATCH=$(stat -c %z /boot/vmlinuz-`uname -r`-generic |cut -d ' ' -f 1 |tr -d "-")
	elif [ -f /boot/vmlinuz-generic-`uname -r` ]; then
		LASTPATCH=$(stat -c %z /boot/vmlinuz-generic-`uname -r` |cut -d ' ' -f 1 |tr -d "-")
	else
		printf "\033[u%s\n" "[ERROR]       "
	secs=15
	printf "%s" "INFO: You have $secs to interrupt (Ctrl+C)."
        	while [ $secs -gt 0 ]; do
                	printf "\r%s" "INFO: You have $secs seconds to interrupt (Ctrl+C)."
                	sleep 1
                	: $((secs--))
		done
		printf "\r%s\n" "INFO: You have 0 seconds to interrupt (Ctrl+C)."
          	return
	fi 
	TODAY=$(date +%Y%m%d)
        SO=$(( ($(date --date=$TODAY +%s) - $(date --date=$LASTPATCH +%s) )/(60*60*24) ))
	if [ $SO -lt 7 ]; then
		if [ $FORCE == 0 ]; then
			printf "\033[u%s\n" "[ERROR - INTERRUPTED]       "
			echo "WARNING: Server was patched only $SO days back! SOSbackup is stopped." >> $LOG
	     		sendlog
	       		cat $LOG >> $LOGFILE
			clear
               		exit 1
		else
			PRINTSTATE="[ERROR - FORCED TO CONITUE]       "
	                echo "WARNING: Server was patched only $SO days back! SOSbackup is stopped." >> $LOG
			sleep 1
		fi
        fi
	printf "\033[u%s\n" "$PRINTSTATE"
}

checkmount() {
        printf "%.${MSGWIDTH}s" "Checkink if the destination is already mounted$dots"
        printf "\033[s%s" "[PROCESSING]"; sleep 1
	PRINTSTATE="[OK]            "
        MOUNTED=$(grep $DED /proc/mounts)
        if [ -n "$MOUNTED" ]; then
		if [ $FORCE == 0 ]; then
			printf "\033[u%s\n" "[ERROR - INTERRUPTED]       "
	           	echo "WARNING: $DED is already mounted! SOSbackup is stopped." >> $LOG
           		sendlog
           		cat $LOG >> $LOGFILE
	   		clear
           		exit 1
		else
			PRINTSTATE="[ERROR - FORCED TO CONITUE]       "
                        echo "WARNING: $DED is already mounted! SOSbackup is stopped." >> $LOG
			sleep 1
		fi
        fi
	printf "\033[u%s\n" "$PRINTSTATE"
}


# MAIN PROCESSES:


todisk() {
	usercheck
	componentscheck
	checkmount
	patched
	dedreal
	collectinfo
	sizecheck
	printf "%.${MSGWIDTH}s" "Checking destination type$dots"
	printf "\033[s%s" "[PROCESSING]"; sleep 1
	if [ "$DEDTYPE" != "disk" ]; then
		printf "\033[u%s\n" "[ERROR]       "
		printf "%s" "INFO: You need to specify a disk."
		exit 1
	fi
	printf "\033[u%s\n" "[OK]           "
	printf "%.${MSGWIDTH}s" "Editing partition table$dots"
        printf "\033[s%s" "[PROCESSING]"; sleep 1
        DEDBP="/tmp/dedbp"
        #2TB - 2199023255552B
        if [ "$DEDSECTORS" -gt 4294967292 -o "$EFI" == "yes" ]; then
                DEDLAB="gpt"
        else
                DEDLAB="dos"
        fi
        echo "unit: sectors" > $DEDBP
        echo "" >> $DEDBP
        if [ $DEDLAB == "dos" ]; then
                echo $DEDREAL"1 : start= 2048, size= "$BOOTFSSIZE", Id=83, bootable" >> $DEDBP
                echo $DEDREAL"2 : start= "$(($BOOTFSSIZE+2048))", size= "$DEDSECT", Id=83" >> $DEDBP
        fi
        if [ $DEDLAB == "gpt" ]; then
                if [ "$EFI" == "yes" ]; then
                        echo $DEDREAL"1 : start= 2048, size= "$BOOTFSSIZE", Id=C12A7328-F81F-11D2-BA4B-00A0C93EC93B" >> $DEDBP
                else
                        echo $DEDREAL"1 : start= 2048, size= "$BOOTFSSIZE", Id=21686148-6449-6E6F-744E-656564454649" >> $DEDBP #####OVERIT typ!!!
                fi
                echo $DEDREAL"2 : start= "$(($BOOTFSSIZE+2048))", size= "$DEDSECT", Id=0FC63DAF-8483-4772-8E79-3D69D8477DE4" >> $DEDBP
        fi
        sfdisk --force -q $DEDREAL < $DEDBP >/dev/null
	printf "\033[u%s\n" "[DONE]        "
	printf "%.${MSGWIDTH}s" "Formatting $DEDREAL1 and $DEDREAL2$dots"
        printf "\033[s%s" "[PROCESSING]"; sleep 1
        if [ "$EFI" == "yes" ]; then
                mkfs.vfat -Fq $DEDREAL"1" >/dev/null
        else
		if [[ $SODBOOTFS == "ext"* ]]; then
			mkfs.$SODBOOTFS -Fq $DEDREAL"1" >/dev/null
		elif [[ $SODBOOTFS == "xfs" ]]; then
			mkfs.$SODBOOTFS -fq $DEDREAL"1" >/dev/null
		else
			mkfs.$SODBOOTFS -Fq $DEDREAL"1" >/dev/null
		fi
        fi
	if [[ $SODROOTFS == "ext"* ]]; then
        	mkfs.$SODROOTFS -Fq $DEDREAL"2" >/dev/null
	elif [[ $SODROOTFS == "xfs" ]]; then
		mkfs.$SODROOTFS -fq $DEDREAL"2" >/dev/null
	else
		mkfs.ext4 -Fq $DEDREAL"2" >/dev/null
	fi
	printf "\033[u%s\n" "[DONE]        "
	mountded
	kernelbak
	copy
	BOOTUUID=$(ls -l /dev/disk/by-uuid/ | grep $BOOTPARTDEDNAME |awk '{print $9}')
	fstabedit
	if [ -d /boot/grub2 ]; then grub2edit; fi
	if [ -f /boot/grub/menu.lst ]; then grub01edit; fi
	date +%F_%R > /mnt/sosbkp/.sosbkp_timestamp
        echo "topartition" > /var/tmp/sosbkp
        echo $DEDREAL"1" >> /var/tmp/sosbkp
	echo $DEDREAL"2" >> /var/tmp/sosbkp
	printf "%.${MSGWIDTH}s" "Unmounting backup device$dots"
	printf "\033[s%s" "[PROCESSING]"; sleep 1
	umount /mnt/sosbkp$BOOTMP
	umount /mnt/sosbkp
	rm -r /mnt/sosbkp	
	printf "\033[u%s\n" "[DONE]       "
	exit 0
}

topartition() {
        usercheck
	componentscheck
	dedreal
	checkmount
	mountded
	collectinfo
	sizecheck
	printf "%.${MSGWIDTH}s" "Checking destination type$dots"
        printf "\033[s%s" "[PROCESSING]"; sleep 1
        if [ "$DEDTYPE" != "partition" ]; then
                printf "\033[u%s\n" "[ERROR]           "
		printf "%s" "INFO: You need to specify a partition or LVM disk."
                exit 1
        fi
	printf "\033[u%s\n" "[OK]           "
        > $LOG
        echo "============================" >> $LOG
        echo "SOSbackup Report" >> $LOG
        date >> $LOG
	echo "topartition" > /var/tmp/sosbkp
        echo $DEDREAL >> /var/tmp/sosbkp
        patched
        if [ $DEL == 1 ]; then
		echo "Clearing old OS backup." >> $LOG 2>&1
		printf "%.${MSGWIDTH}s" "Clearing old OS backup$dots"
		printf "\033[s%s" "[PROCESSING]"; sleep 1
		rm -rf /mnt/sosbkp/* >> $LOG 2>&1
		printf "\033[u%s\n" "[DONE]         "
        fi
	ADDITIONALDONOTCOPY=" --exclude=$BOOTMP/* "
        copy
	date +%F_%R > /mnt/sosbkp/.sosbkp_timestamp
	fstabedit
        kernelbak
        if [ -d /boot/grub2 ]; then grub2edit; fi
        if [ -f /boot/grub/menu.lst ]; then grub01edit; fi
        if [ -f /etc/lilo.conf ]; then pliloedit; fi
	printf "%.${MSGWIDTH}s" "Unmounting the backup device $dots"
	printf "\033[s%s" "[PROCESSING]"; sleep 1
        echo "Unmounting $DEDREAL and removing /mnt/sosbkp" >> $LOG
        umount /mnt/sosbkp > /dev/null && sleep 2; rm -r /mnt/sosbkp >> $LOG 2>&1
	printf "\033[u%s\n" "[DONE]         "
        echo "DONE" >> $LOG
        sendlog
        sleep 1
        rm -rf /mnt/sosbkp >> $LOG 2>&1
        cat $LOG >> $LOGFILE
        shutdonwserver
        exit 0
}

fstabedit() {
	printf "%.${MSGWIDTH}s" "Editing fstab on backup device$dots"
        printf "\033[s%s" "[PROCESSING]"; sleep 1
        #FSTYPE=$(df -T $DEDREAL | tail -1 | awk '{print $2}')
        if [ "$DEDTYPE" == "disk" ] ; then
                if [ "$EFI" == "yes" ]; then
                        echo $DEDREAL"1         " $BOOTMP "     vfat    umask=0077,shortname=winnt   0 2" > /mnt/sosbkp/etc/fstab
                else
                        echo $DEDREAL"1         " $BOOTMP "     $SODBOOTFS  defaults   0 2" > /mnt/sosbkp/etc/fstab
                fi
		echo $DEDREAL"2         /  " $SODROOTFS " defaults  1 1" >> /mnt/sosbkp/etc/fstab
        elif [ "$DEDTYPE" == "partition" ] ; then
                grep " /boot" /etc/fstab > /mnt/sosbkp/etc/fstab
		echo $DEDREAL "       /  " $SODROOTFS " defaults  1 1" >> /mnt/sosbkp/etc/fstab
        fi
        #cp /etc/fstab /tmp/fstab
        egrep "$EXCEPTGREP" /etc/fstab > /tmp/fstab.temp
        cat /tmp/fstab.temp >> /mnt/sosbkp/etc/fstab
        echo "fstab on backup device has been edited:" >> $LOG 2>&1
        echo "" >> $LOG
        cat /mnt/sosbkp/etc/fstab >> $LOG
        echo "" >> $LOG
        printf "\033[u%s\n" "[DONE]         "
}

dedreal() {
        if [ -b $DED ]; then
                DEDREAL=$DED
        elif [ -b /dev/$DED ]; then
                DEDREAL=/dev/$DED
        else
           echo "Destination $DEDREAL not found!" >> $LOG
           printf "\033[u%s\n" "[ERROR]       "
	   printf "%s" "INFO: Destination $DEDREAL was not found."
           cat $LOG >> $LOGFILE
           exit 1
        fi
        DEDREALNAME=$(echo $DEDREAL | sed 's:/dev/::g')
        if [ "${DEDREALNAME: -1}" -eq "${DEDREALNAME: -1}" ] &> /dev/null ; then
                DEDTYPE="partition"
	elif [[ $DEDREALNAME == "mapper"* ]]; then
		DEDTYPE="partition"
        else
                DEDTYPE="disk"
        fi
}


collectinfo() {
        printf "%.${MSGWIDTH}s" "Collectiong information$dots"
        printf "\033[s%s" "[PROCESSING]"; sleep 1

	#if [ -b $DED ]; then
        #        DEDREAL=$DED
        #elif [ -b /dev/$DED ]; then
        #        DEDREAL=/dev/$DED
        #else
        #   echo "Destination $DEDREAL not found!" >> $LOG
        #   printf "\033[u%s\n" "[ERROR]       "
        #   printf "%s" "INFO: Destination $DEDREAL was not found."
        #   cat $LOG >> $LOGFILE
        #   exit 1
        #fi
        #DEDREALNAME=$(echo $DEDREAL | sed 's:/dev/::g')
        #if [ "${DEDREALNAME: -1}" -eq "${DEDREALNAME: -1}" ] &> /dev/null ; then
        #        DEDTYPE="partition"
        #elif [[ $DEDREALNAME == "mapper"* ]]; then
        #        DEDTYPE="partition"
        #else
        #        DEDTYPE="disk"
        #fi
	SODBOOT=xxxxxx
	SODROOT=xxxxxx
	SODBOOTFS=$(df -T /boot | grep -v Type |awk '{print $2}')
	SODROOTFS=$(df -T / | grep -v Type |awk '{print $2}')
        EXCEPTGREP=${EXCLUDE[@]/#/|}; EXCEPTGREP=$(echo "$EXCEPTGREP"| cut -c 2- |tr -d " \t\n\r" )
        WHAT=$(cat /etc/fstab |grep -vE "#|swap|SWAP|sosbkp" |grep -vE "$EXCEPTGREP" | grep -E "UUID|/dev" |awk '{print $2}'| sed ':a;N;$!ba;s/\n/ /g')
        NLINES=$(df -kP $WHAT | sed 1d |uniq | wc -l)
        COUNTER=0
        TOGETHER=0
        while [ $COUNTER -lt $NLINES ]; do
                let COUNTER=COUNTER+1
                LINE=$(df -kP $WHAT | grep -v "df"| sed 1d |uniq |awk '{print $3}'|sed "${COUNTER}q;d")
                TOGETHER=$(expr $TOGETHER + $LINE)
        done
        mkdir -p /mnt/sosbkp
        DEDSIZE=$(df -kP /mnt/sosbkp | sed 1d |awk '{print $2}')

        if [ -d /sys/firmware/efi ]; then EFI="yes" ; else EFI="no" ; fi
        DEDSECT=$(($(($TOGETHER * 1024)) / 512))
        DEDSECT=$(($(($DEDSECT / 100)) * 117))
        if [ "$DEDTYPE" == "disk" ] ; then 
		BYTSPERSECTOR=$(cat /sys/block/$DEDREALNAME/queue/hw_sector_size)
	else 
		BYTSPERSECTOR=0
	fi
        BOOTMP=$(grep " /boot" /etc/fstab | awk '{print $2}')
        BOOTPART=$(df |grep " /boot" | awk '{print $1}')
	if [ "$DEDTYPE" == "partition" ] ; then BOOTPARTDED=$(cat /proc/mounts |grep " /boot" |awk '{print $1}'); fi
	if [ "$DEDTYPE" == "disk" ] ; then BOOTPARTDED=$DEDREAL"1"; fi
        BOOTPARTNAME=$(echo $BOOTPART | sed 's:/dev/::g')
	BOOTPARTDEDNAME=$(echo $BOOTPARTDED | sed 's:/dev/::g')
        SODREALNAME=$(df |grep "/boot" |awk '{print $1}'| sed 's/[0-9]*//g' |sed 's:/dev/::g')
        BOOTFSSIZE=$(cat /sys/block/$SODREALNAME/$BOOTPARTNAME/size)
        DEDSECTORS=$(cat /sys/block/$SODREALNAME/size)
	if [ "$DEDTYPE" == "partition" ] ; then BOOTUUID=$(ls -l /dev/disk/by-uuid/ | grep $BOOTPARTNAME |awk '{print $9}'); fi
#	if [ "$DEDTYPE" == "disk" ] ; then BOOTUUID=$(ls -l /dev/disk/by-uuid/ | grep $BOOTPARTDEDNAME |awk '{print $9}'); fi ### Can not be collected before part creation
	printf "\033[u%s\n" "[DONE]       "
}

mountded() {
        printf "%.${MSGWIDTH}s" "Mounting backup device$dots"
        printf "\033[s%s" "[PROCESSING]"; sleep 1
        mkdir -p /mnt/sosbkp > /dev/null
	if [ "$DEDTYPE" == "partition" ] ; then
        	mount $DEDREAL /mnt/sosbkp
	elif [ "$DEDTYPE" == "disk" ] ; then
        	mount $DEDREAL"2" /mnt/sosbkp
        	mkdir -p /mnt/sosbkp$BOOTMP
        	mount $DEDREAL"1" /mnt/sosbkp$BOOTMP
	fi
	printf "\033[u%s\n" "[DONE]       "
}

copy() {
	printf "%.${MSGWIDTH}s" "Running backup$dots"
        printf "\033[s%s" "[PROCESSING]"; sleep 1
        if [ $SELINUX == 1 ]; then
                SEL="-X"
        else
                SEL=""
        fi
        DONOTCOPY=("${EXCLUDE[@]/%//*}")
        rsync -aAv $SEL --human-readable --exclude=/dev/* --exclude=/sys/* --exclude=/run/* --exclude=/proc/* --exclude=/mnt/sosbkp $ADDITIONALDONOTCOPY ${DONOTCOPY[@]/#/--exclude=} / /mnt/sosbkp | sed '0,/^$/d' >> $LOG 2>&1
	printf "\033[u%s\n" "[DONE]       "
}

kernelbak() {
	printf "%.${MSGWIDTH}s" "Creating copy of current kernel$dots"
        printf "\033[s%s" "[PROCESSING]"; sleep 1
        echo "Copying current kernel." >> $LOG 2>&1
        cp -f /boot/vmlinuz-`uname -r` /boot/vmlinuz-SOSbackup 2>/dev/null
        cp -f /boot/vmlinuz-huge-`uname -r` /boot/vmlinuz-SOSbackup 2>/dev/null
	cp -f /boot/initramfs-`uname -r`.img /boot/initramfs-SOSbackup.img 2>/dev/null
	printf "\033[u%s\n" "[DONE]       "
}

grub2edit() {
	printf "%.${MSGWIDTH}s" "Editing Grub 2$dots"
        printf "\033[s%s" "[PROCESSING]"; sleep 1
	GRUBCFG=$(find /boot -name grub.cfg|grep grub.cfg)
	DEDROOTREAL=$(df |grep "/mnt/sosbkp$" |awk '{print $1}')
	if [ -f /etc/grub.d/50_sosbkp ]; then
		PRINTSTATE="[NO CHANGE]       "
		echo "SOSbackup found in GRUB 2." >> $LOG 2>&1
	else
		echo "SOSbackup was not found in GRUB 2." >> $LOG 2>&1
		source /etc/default/grub
		echo '#!/bin/bash' > /etc/grub.d/50_sosbkp
		echo 'exec tail -n +3 $0' >> /etc/grub.d/50_sosbkp
		echo "#SOSbackup auto generated GRUB entry" >> /etc/grub.d/50_sosbkp
		echo "menuentry 'Boot from SOSbackup disk'  {" >> /etc/grub.d/50_sosbkp
		echo "		load_video" >> /etc/grub.d/50_sosbkp
		echo "		set gfxpayload=keep" >> /etc/grub.d/50_sosbkp
		echo "		insmod gzio" >> /etc/grub.d/50_sosbkp
		echo "		insmod part_msdos" >> /etc/grub.d/50_sosbkp
		echo "		insmod ext2" >> /etc/grub.d/50_sosbkp
		if [ $SODROOTFS == "xfs" -o $SODBOOTFS == "xfs" ]; then echo "		insmod xfs" >> /etc/grub.d/50_sosbkp ; fi
		echo "		insmod lvm" >> /etc/grub.d/50_sosbkp
		echo "		search --no-floppy --fs-uuid --set=root $BOOTUUID" >> /etc/grub.d/50_sosbkp
		echo "		linux16 /vmlinuz-SOSbackup root=$DEDROOTREAL ro $GRUB_CMDLINE_LINUX" >> /etc/grub.d/50_sosbkp
		echo "		initrd16 /initramfs-SOSbackup.img" >> /etc/grub.d/50_sosbkp
		echo "}" >> /etc/grub.d/50_sosbkp
		chmod a+x /etc/grub.d/50_sosbkp
	        grub2-mkconfig -o $GRUBCFG &> /dev/null 
		if [ "$DEDTYPE" == "disk" ]; then
			mount --bind /dev /mnt/sosbkp/dev
			mount --bind /sys /mnt/sosbkp/sys
			mount --bind /run /mnt/sosbkp/run
			mount --bind /proc /mnt/sosbkp/proc
			chroot /mnt/sosbkp /bin/bash -c "dracut --force --regenerate-all"
			grub2-install $DEDREAL &> /dev/null
			cp -f $GRUBCFG /mnt/sosbkp$GRUBCFG
			umount /mnt/sosbkp/dev
			umount /mnt/sosbkp/sys
			umount /mnt/sosbkp/run
			umount /mnt/sosbkp/proc
		fi
		PRINTSTATE="[NO CHANGE]       "
        	echo "GRUB is configured." >> $LOG 2>&1
	fi
	printf "\033[u%s\n" "$PRINTSTATE"
}

grub01edit() {
        printf "%.${MSGWIDTH}s" "Editing Grub$dots"
        printf "\033[s%s" "[PROCESSING]"; sleep 1
	GRUBCFG=$(find /boot -name grub.conf|grep grub.conf)
	DEDROOTREAL=$(df |grep "/mnt/sosbkp$" |awk '{print $1}')
	DEVMAP=$(find /boot -name device.map)
	if [ "$DEDTYPE" == "disk" ]; then
		if grep -q "$DEDREAL" $DEVMAP ; then
			echo "Backup defice was found in devices.map"
		else
			echo "Editing devices.map"
			mv -f /mnt/sosbkp$DEVMAP /mnt/sosbkp$DEVMAP.bak; exit | grub --device-map=/mnt/sosbkp$DEVMAP > /dev/null
		fi
	fi
	if grep -q "$TITLE" $GRUBCFG ; then
		PRINTSTATE="[NO CHANGE]       "
        	echo "SOSbackup found in GRUB." >> $LOG 2>&1
	else
                echo "SOSbackup was not found in GRUB 1.X." >> $LOG 2>&1
		if [ "$DEDTYPE" == "partition" ]; then ROOTHD=$(cat $GRUBCFG |grep "root ("|grep -v "#"|head -1); fi
		if [ "$DEDTYPE" == "disk" ]; then ROOTHD=$(cat /mnt/sosbkp$DEVMAP |grep $DEDREAL| cut -c 1-4); ROOTHD="        root $ROOTHD,0)"; fi
		echo "#SOSbackup auto generated GRUB entry - START" >> $GRUBCFG
		echo "title $TITLE" >> $GRUBCFG
		echo "$ROOTHD" >> $GRUBCFG
		AFTERKERNEL=$(cat /boot/grub/grub.conf |grep "kernel /vmlinuz-"| grep -v "#" |head -1| cut -d" " -f5-)
		echo "		kernel /vmlinuz-SOSbackup ro root=$DEDROOTREAL" $AFTERKERNEL >> $GRUBCFG
		echo "		initrd /initramfs-SOSbackup.img " >> $GRUBCFG
		echo "#SOSbackup auto generated GRUB entry - END" >> $GRUBCFG
                if [ "$DEDTYPE" == "disk" ]; then
                        mount --bind /dev /mnt/sosbkp/dev
                        mount --bind /sys /mnt/sosbkp/sys
                        mount --bind /run /mnt/sosbkp/run
                        mount --bind /proc /mnt/sosbkp/proc
                        chroot /mnt/sosbkp /bin/bash -c "grub-install $DEDREAL > /dev/null; dracut --force /boot/initramfs-SOSbackup.img"
                        cp -f $GRUBCFG /mnt/sosbkp$GRUBCFG
                        umount /mnt/sosbkp/dev
                        umount /mnt/sosbkp/sys
                        umount /mnt/sosbkp/run
                        umount /mnt/sosbkp/proc
                fi
		PRINTSTATE="[DONE]            "
                echo "GRUB is configured." >> $LOG 2>&1
	fi
	printf "\033[u%s\n" "$PRINTSTATE"
}

pliloedit() {
        printf "%.${MSGWIDTH}s" "Editing Grub$dots"
        printf "\033[s%s" "[PROCESSING]"; sleep 1
	if grep -q "SOSbackup" /etc/lilo.conf ; then
		PRINTSTATE="[NO CHANGE]            "
		echo "SOSbackup found in LILO." >> $LOG >&1
	else
		echo "Editing LILO..................................  [vvvv]"	
		echo "SOSbackup was not found in LILO. Configuring ..." >> $LOG 2>&1
		echo "#SOSbackup auto generated LILO entry - START" >> /etc/lilo.conf
		echo "image = /boot/vmlinuz-SOSbackup" >> /etc/lilo.conf
		echo "	root = $DED" >> /etc/lilo.conf
		echo "	label = SOSbackup" >> /etc/lilo.conf
		echo "	read-only" >> /etc/lilo.conf
		echo "#SOSbackup auto generated LILO entry - END" >> /etc/lilo.conf
		lilo 
		PRINTSTATE="[DONE]            "
		echo "LILO is configured."  >> $LOG 2>&1
	fi
}

# POST-PROCESSES:

clear() {
	printf "%.${MSGWIDTH}s" "Clearing the SOSbackup temp files$dots"
        printf "\033[s%s" "[PROCESSING]"; sleep 1
        > $LOG
        echo "============================" >> $LOG
        echo "Clearing SOSbackup" >> $LOG
        date >> $LOG
        killall rsync >> $LOG 2>&1
        umount -r /mnt/sosbkp >> $LOG 2>/dev/null
        sleep 1
        rm -rf /mnt/sosbkp >> $LOG 2>&1
        cat $LOG >> $LOGFILE
	printf "\033[u%s\n" "[DONE]       "
}

sendlog() {
	if [ $SENDEMAIL == 1 ]; then
		printf "%.${MSGWIDTH}s" "Sending log to $EMAIL$dots"
		printf "\033[s%s" "[PROCESSING]"; sleep 1
		cat -v $LOG | mailx -r $SMTPUSER -s "SOSbackup report" -S smtp=$SMTP -S smtp-use-starttls -S smtp-auth=login -S smtp-auth-user=$SMTPUSER -S smtp-auth-password=$SMTPPASS -S ssl-verify=ignore -S nss-config-dir=$NSSCONFIGDIR $EMAIL
		printf "\033[u%s\n" "[DONE]       "
	fi
}

shutdonwserver() {
        if [ $SHUT == 1 ]; then
		printf "%s" "INFO: Shutting down..."
		echo "Shutting down the system..." >> $LOGFILE 2>&1
		if [ -f $SHUTSCRIPT ]
                	then
                        	$SHUTSCRIPT 2>&1
                	else
                        	shutdown -P now 2>&1
                fi
        fi
}


# ADDITIONAL INFO:

ver() {
        echo "SOSbackup $version"
        echo "Author: Michal Muransky"
        exit 0
}

show() {
        usercheck
        if [ ! -f /var/tmp/sosbkp ]; then
                echo "WARNING: File /var/tmp/sosbkp is missing. There are probably no backups."
                exit 1
        fi
	DED=$(cat /var/tmp/sosbkp)
        mkdir /mnt/sosbkp 2> /dev/null
        mount $DED /mnt/sosbkp 2> /dev/null
        timestamp=`cat /mnt/sosbkp/.sosbkp_timestamp`
        noofiles=`du /mnt/sosbkp/ |wc -l|tail -1`
        echo "==================================================="
        echo "OS Backup created on $timestamp by $noofiles files"
        echo "==================================================="
        ls -la /mnt/sosbkp
        echo "==================================================="
        df -hP /mnt/sosbkp
        echo "==================================================="
        umount /mnt/sosbkp 2> /dev/null
        sleep 1
        rm -rf /mnt/sosbkp >> $LOG 2>&1
        exit 0
}

help() {
        echo ""
        echo "SOSbackup $version"
        echo ""
        echo "This script is used to backup whole OS to a different single partition."
        echo "Backup device is fully operational and can be booted in case of emergency."
        echo "You must be a root or to be in sudoers to be able to run SOSbackup."
        echo ""
        echo "How to use: sosbkp [OPTIONS]... [-d|--to-disk=<partition>]"
        echo ""
        echo "Arguments:"
        echo "-d <partition>, --to-disk=<partition>	Start OSCopy to destionation"
        echo "					If you are using LVM partition as the destination,"
        echo "					use path /dev/mapper/... "
        echo "-S, --shutdown				Shutdown after backup"
        echo "-x, --no-email				Report will be not sent via email"
        echo "-c, --clear				Can be used after interrupted backup"
        echo "-n, --no-delete				Do NOT delete previous backup data. Will update current backup."
        echo "					Keep in mind that rsync nees some free space for temporarry files."
        echo "-s, --show				Show last backup info"
        echo "-f, --force				Force backup and suppress all warnings."
        echo "-v, --version				Show SOSbackup version"
        echo "    --debug				Debug mode"
        echo "-h, --help				This Help page"
        echo ""
        echo "Example:"
        echo "sosbkp --to-disk=/dev/sdb1"
        echo "sosbkp -Sxd /dev/sdb1"
        echo "sosbkp -S -f -d /dev/mapper/backup_vg-backup_lv"
        echo ""
        exit 0
}

while true ; do
    case "$1" in
	-t|--test)
	    todisk
            break
            ;;
	-X|--no-selinux)
	    SELINUX=0
	    shift
	    ;;
        -n|--no-delete)
            DEL=0
            shift
            ;;
        -v|--version)
            ver
            ;;
        -f|--force)
             FORCE=1
             shift
            ;;
        -s|--show)
             show
            ;;
        -c|--clear)
	    usercheck
            clear
            break
            ;;
        -x|--no-email)
            SENDEMAIL=0
            shift
            ;;
        --debug)
	    set -xv
	    shift
            ;;
        -h|--help)
            help
            ;;
	-d|--to-disk)
            case "$2" in
                 *) DED=$2 ; todisk ;;
            esac ;;
        -p|--to-partition)
            case "$2" in
                 *) DED=$2 ; topartition ;;
            esac ;;
        -S|--shutdown)
            SHUT=1
            shift
            ;;
        --) help ; shift ; break ;;
        *) echo "Internal error!" ; exit 1 ;;
    esac
done
